<!DOCTYPE html>
<html lang="en" id="blog" class="tablet mobile">
  <head>
    <meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="google-site-verification" content="f0LCrdI6z4Fo8zld4sHCgo5SiUE4EYYRUa6KVeX3Mw8" />

<meta name="description" content="Follow the Stripe blog for product announcements, feature updates, new countries, and technical posts about payments." />

<link rel="shortcut icon" href="../../favicon.ico">

<link rel="apple-touch-icon-precomposed" href="../../img/apple-touch-icon/152x152.png?2" />
<link rel="apple-touch-icon-precomposed" sizes="120x120" href="../../img/apple-touch-icon/120x120.png?2" />

  <meta property="og:image" content="https://stripe.com/img/open-graph/logo.png?2" />
  <link rel="image_src" type="image/png" href="../../img/open-graph/logo.png?2"/>

<link rel="stylesheet" href="https://cloud.typography.com/711858/764882/css/fonts.css" />
<link rel="stylesheet" href="../../assets/shared-site-aec6cecd411e700a28df6c9943d37801.css" />
  <link rel="stylesheet" href="../../assets/blog-ada6c3a77cd627b09ac436c3a82dd49d.css">
  <link rel="stylesheet" href="../../assets/blogposts-b9a9b6ffe0287dc66146bd753faba55d.css">


<!--[if lt IE 9]>
<script src="/assets/html5shiv-17761200a17ebcb716dda86cca6d2472.js"></script>
<![endif]-->

<script src="../../assets/shared-site-68b6ee96f2b06c9ee69778bf0979b5fb.js"></script>
  <script src="../../assets/blog-776e3ed92eef5022ed98688d349fd7af.js"></script>
  <script src="../../assets/zoom-3a00e8ab5b6e3ee875d7dc1bbfe183c3.js"></script>


  <link rel="alternate" type="application/rss+xml" title="RSS" href="../feed.rss" />
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />

    <title>    Stripe Blog
</title>
    <meta content="DBo4vH-ATSs8ZDTXXOgPwotZreMkKxpb5le_r3OKGJeEMD1_ZuMIm890bgcCkrNJs-RXCzVAzmMvTSjD8oe8DQ==" name="csrf-token" />
  </head>
  <body id="" class="">
    <div id="main">

      <header id="main-header" class=''>
  <div class="inner-col">
    <h1><a href="../../country?country=CH&amp;redirect=%252F" title="Stripe"></a></h1>
    <nav>
      <ul class="pages">
        <li class="home"><a href="../../country?country=CH&amp;redirect=%252F">Home</a></li>
        <li class="features"><a href="../../features">Features</a></li>
        <li class='pricing'><a href="../../pricing">Pricing</a></li>
        <li class="more">
            <span>Products</span>
            <ul>
              <li><a href='../../country?country=CH&amp;redirect=%252Fcheckout'>Checkout</a></li>
              <li><a href='../../country?country=CH&amp;redirect=%252Fsubscriptions'>Subscriptions</a></li>
              <li><a href='../../country?country=CH&amp;redirect=%252Frelay'>Relay</a></li>
              <li><a href='../../marketplaces'>Connect</a></li>
              <li><a href='../../country?country=CH&amp;redirect=%252Fbitcoin'>Bitcoin</a></li>
              <li><a class="new" href='../../atlas/index.html'>Atlas</a></li>

              <li class='separator'><a href="../../country?country=CH&amp;redirect=%252Fgallery">Gallery</a></li>
              <li><a href="1">Blog</a></li>
              <li><a href="../../country?country=CH&amp;redirect=%252Fabout">About</a></li>
              <li><a href="../../jobs/index.html">Jobs</a></li>
            </ul>
        </li>
      </ul>
      <ul class="external">
        <li><a href="../../docs.1">Documentation</a></li>
        <li><a href="https://support.stripe.com">Help &amp; Support</a></li>

        <li class="button">
          <a data-adroll-segment='submit_two' href="https://dashboard.stripe.com/login">Sign in</a>
        </li>
      </ul>
    </nav>
  </div>
</header>


      <div id="main-content">
        
  <header id="blog-header">
  	<h1><a href="1">Blog</a></h1>
  	<p><a href="https://twitter.com/stripe">Follow Stripe on Twitter</a></p>
  </header>
  
      <div id='blog-post--stripe-toronto-meetup'>
<article class=''>

  <header>
    <a class="picture" href="../../country?country=CH&amp;redirect=%252Fabout#jonathan">
      <img src="../../img/about/team/jonathan@2x.jpeg">
    </a>
    <h1><a href="../../country?country=CH&amp;redirect=%252Fblog%252Fstripe-toronto-meetup">Stripe Toronto Meetup<br /></a></h1>
    <p>
      <a class="author" href="../../country?country=CH&amp;redirect=%252Fabout#jonathan">Jonathan Hernandez</a>
      <span>on</span> May 21, 2014
    </p>
  </header>
  
  <div class="content">
    

    <div class="map-image">
    <a href="http://maps.google.com/maps?q=10%20Isabella%20St,%20Toronto,%20ON,%20M4Y%201N1&hl=en&hnear=10%20Isabella%20St,%20Toronto,%20ON,%20M4Y%201N1&t=m&z=15" target="_blank">
        <img src="https://maps.googleapis.com/maps/api/staticmap?center=10%20Isabella%20St,%20Toronto,%20ON,%20M4Y%201N1&zoom=15&size=640x280&sensor=false&style=feature:administrative.land_parcel|element:geometry|visibility:off&style=feature:water|element:geometry.fill|color:0x52b6ef&style=feature:landscape|element:geometry|saturation:-100|lightness:50&style=feature:road|saturation:-100|lightness:50&style=feature:poi|element:geometry|saturation:-100|lightness:50&style=feature:poi|element:labels.text.fill|lightness:30&style=feature:road.arterial|element:labels.text.fill|lightness:-30&style=feature:road.highway|element:geometry.fill|color:0xf2be50&style=feature:road.highway|element:geometry.stroke|color:0xe0994c&style=feature:road.highway|element:labels.text.fill|color:0xb96f1e&style=feature:poi.park|element:geometry|color:0xcbd9b4&style=feature:transit|element:labels|lightness:20&style=feature:administrative|saturation:-100" width="640" height="280" />

        </a>

</div>


    <p>Come hang out with fellow Canadians <a href="../../country?country=CH&amp;redirect=%252Fabout#jonathan">Jonathan</a>, <a href="../../country?country=CH&amp;redirect=%252Fabout#woodrow">Steve</a>, and <a href="../../country?country=CH&amp;redirect=%252Fabout#chris">Chris</a>

      at <a href="http://www.theartfuldodger.ca/">The Artful Dodger</a> in Toronto on Tuesday night. We’d love
      to meet you all and buy you a pint!</p>

    <div class="map-details">
      <dl>
        <dt>When:</dt>
        <dd>Tuesday, May 27th, 2014, at 7:00 PM</dd>

        <dt>Where:</dt>
        <dd><a href="https://goo.gl/maps/H2j9t">The Artful Dodger</a></dd>
      </dl>
    </div>

    <p>RSVP via our <a href="../../events/toronto-meetup-may-2014">event page</a>.</p>



  </div>

  <footer>
    <p>
      May 21, 2014
    </p>
  </footer>
  
</article>
</div>


      <div id='blog-post--network-neutrality'>
<article class=''>

  <header>
    <a class="picture" href="../../country?country=CH&amp;redirect=%252Fabout#jon">
      <img src="../../img/about/team/jon@2x.jpeg">
    </a>
    <h1><a href="../../country?country=CH&amp;redirect=%252Fblog%252Fnetwork-neutrality">Network Neutrality<br /></a></h1>
    <p>
      <a class="author" href="../../country?country=CH&amp;redirect=%252Fabout#jon">Jon Zieger</a>
      <span>on</span> May 14, 2014
    </p>
  </header>
  
  <div class="content">
    <p>Stripe works with businesses of every size. Among them are thousands of startups: companies that challenge legacy business models and upend incumbents.</p>

<p>The FCC plans to vote tomorrow on whether to approve FCC Chairman <a href="http://www.vox.com/cards/network-neutrality/whats-network-neutrality">Tom Wheeler’s plan</a> to divide the internet into fast lanes for toll-paying incumbents and slower channels for everyone else. This plan would make it harder for new businesses to succeed.</p>

<p>As we’ve <a href="../../country?country=CH&amp;redirect=%252Fblog%252Ftowards-transparency">written before</a>, we believe in the power of impartial platforms. We’re building a platform ourselves, and we work hard to ensure that Stripe treats businesses of all size neutrally. Mr. Wheeler’s plan would push the internet in the opposite direction. It would give larger players a distinct advantage, hurt new companies, and dampen the rapid innovation that has thus far defined the internet economy.</p>

<p>For a payments company, the consistency and speed of the network are particularly important. Giving unfair advantages to large companies will yield a feedback loop, consolidating business in the hands of a few large players with the resources to pay the internet gatekeepers. An internet where certain retailers suffer throttled network connectivity is bad in the short term for consumer experience, and bad in the long term for consumer choice.</p>

<p>We ask the FCC establish clear and robust network neutrality rules that protect impartiality and discourage unfair economies of scale.</p>

  </div>

  <footer>
    <p>
      May 14, 2014
    </p>
  </footer>
  
</article>
</div>


      <div id='blog-post--stripe-open-source-retreat'>
<article class=''>

  <header>
    <a class="picture" href="../../country?country=CH&amp;redirect=%252Fabout#gdb">
      <img src="../../img/about/team/gdb@2x.jpeg">
    </a>
    <h1><a href="../../country?country=CH&amp;redirect=%252Fblog%252Fstripe-open-source-retreat">Stripe Open-Source Retreat<br /></a></h1>
    <p>
      <a class="author" href="../../country?country=CH&amp;redirect=%252Fabout#gdb">Greg Brockman</a>
      <span>on</span> April 24, 2014
    </p>
  </header>
  
  <div class="content">
    

<p class="lead"> We rely on a lot of open-source software at Stripe, and over time we’ve contributed back our own share of patches and projects. We decided we’d like to do more, though, so we’re launching an open-source retreat program. </p>

<p> We’ll give a grant to a small number of developers to come to San Francisco to work full-time on an open-source project for a period of 3 months. They’ll have space in our SF office. We’ll ask that they give a couple of internal tech talks over the course of the program (ideally focused on what they’re working on), but otherwise it’ll be no-strings-attached. </p>

<p> We’re looking for projects where this grant can make an especially large difference. Maybe it’s a rapidly-growing project where the maintainer can currently barely find time for bugfixes. Maybe it’s a crazy experimental idea that needs to be tried out in practice. Or maybe it’s some infrastructure that every company currently builds in-house. </p>

<p> We’ll select projects using the following criteria: </p>

<ul>
<li> <strong>Impact of our grant.</strong> Does our grant have the ability to transform this project’s trajectory? Are you an influencer within the project? Will your ability to focus on it full-time move the project forward in some significant way? </li>
<li> <strong>Importance of the project.</strong> Is this a project that people already use and has attracted a lot of attention? If this project isn’t itself popular yet, how much potential does it have? Is it a project that, while possibly risky, would be particularly exciting if successful? </li>
<li> <strong>Likelihood of success.</strong> Is there a good plan for how these 3 months will be used? What indicators are there that you’ll be able to pull it off (obvious passion for the project, existing work on the project, previous work on similar projects)? </li>
</ul>

<h2> Parameters of the program </h2>

<ul>
<li> The program will run from <strong>September 1st until December 1st, 2014</strong>. (Those exact dates are flexible if need be.) </li>
<li> The grant will be $7,500 per month. We’ll also provide meals at our office during the week. </li>
</ul>

<hr>

<h2> To apply </h2>

<p> Please send an email to <a href="mailto:open-source-retreat@stripe.com">open-source-retreat@stripe.com</a>. Please include a writeup explaining why we should select you. We’d be particularly interested to hear: </p>

<ul>
<li> Some context around the project. What does it do? Who uses it? Why is it interesting? </li>
<li> Your history with this project. Why is it important to you personally? What contributions have you made to it? What makes you well-suited to working on it? </li>
<li> A link to the project. (It must already exist, though it might be early-stage.) </li>
<li> Why this grant will make a difference for you. Why are you interested in participating? </li>
<li> Your plan for those 3 months. What will you actually spend your time on? Be detailed if useful, but we mostly want to have a sense of what will actually get done as opposed to a day-by-day projection. </li>
</ul>

<p> Applications will be accepted until the end of <strong>May 31st (UTC-11)</strong>. We’ll select a batch of finalists and do a round of Skype interviews before choosing the grantees. </p>

<hr>

<p>
We’re targeting two participants to start, though we may end up with more or fewer depending on applications. We’ll select projects based on their importance broadly rather than importance to Stripe in particular.
</p>

<p>
While decisions will be based on impact and merit, we’d be especially psyched to fund people from backgrounds often underrepresented in the open-source community. We also will accept applicants from outside the United States (and do what we can to help out with visas).
</p>

<p> We’re excited to see how this program develops. If you’ve any questions or suggestions about how we could make it better, feel free to <a href="mailto:open-source-retreat@stripe.com">drop us an email</a>. </p>



  </div>

  <footer>
    <p>
      April 24, 2014
    </p>
  </footer>
  
</article>
</div>


      <div id='blog-post--heartbleed'>
<article class=''>

  <header>
    <a class="picture" href="../../country?country=CH&amp;redirect=%252Fabout#andy">
      <img src="../../img/about/team/andy@2x.jpeg">
    </a>
    <h1><a href="../../country?country=CH&amp;redirect=%252Fblog%252Fheartbleed">Heartbleed<br /></a></h1>
    <p>
      <a class="author" href="../../country?country=CH&amp;redirect=%252Fabout#andy">Andy Brody</a>
      <span>on</span> April 9, 2014
    </p>
  </header>
  
  <div class="content">
    
<p> By now, you’ve probably been bombarded with announcements about
the <a href="http://heartbleed.com/">Heartbleed</a> bug from a number
of different sources. People have
released <a href="http://filippo.io/Heartbleed/">vulnerability-checking</a>
tools, walkthroughs of
the <a href="http://blog.existentialize.com/diagnosis-of-the-openssl-heartbleed-bug.html">vulnerable
code</a>, and commentary about the
overall <a href="https://www.schneier.com/blog/archives/2014/04/heartbleed.html">implications</a>
of this bug. </p>

<p> The long and short of it is most
of <a href="http://aws.amazon.com/security/security-bulletins/heartbleed-bug-update/">the</a> <a href="http://googleonlinesecurity.blogspot.ca/2014/04/google-services-updated-to-address.html">known</a> <a href="http://www.zdnet.com/heartbleed-bug-affects-yahoo-imgur-okcupid-convo-7000028213/">Internet</a>
was vulnerable to Heartbleed. Most SSL bugs only allow attackers to
intercept encrypted data. This one was more severe because it also
allowed an attacker to read the memory of a remote SSL process,
meaning that cryptographic keys could also have been
compromised. </p>

<p> While we have no reason to believe that this vulnerability has
been used to attack us, we take a very cautious approach to
security. Sometimes that’s adding stripe.com to
the <a href="http://dev.chromium.org/sts">Chrome HSTS pre-loaded
list</a>; sometimes
that’s <a href="https://www.ssllabs.com/ssltest/analyze.html?d=stripe.com">tuning
our ciphers</a>
for <a href="http://en.wikipedia.org/wiki/Forward_secrecy">perfect
forward secrecy</a> (which prevents an attacker with your compromised
keys from decrypting past SSL sessions). In this case, it was
responding under the assumption that public exploits were just hours
away. </p>

<h2> Our response </h2>

<p> One of the most important responsibilities of a security team is
to respond to critical vulnerabilities as quickly as possible. With a
bug like Heartbleed, there’s a limited window between when the
vulnerability is announced, public patches are released, and exploit
code becomes freely available for any script kiddie to use. The right
strategy is sometimes to wait for vendor-supplied packages to be
available, but in other cases (such as with the <a href="http://en.wikipedia.org/wiki/CRIME">CRIME</a>
vulnerability) we’ve been able to patch faster by building our own
packages. </p>

<p> Here was the timeline of our response (all in Pacific time on
Monday):

<ul>
<li> 11:29 AM: We were alerted to Heartbleed. We noticed Ubuntu had
yet to release packages, so we proactively started building our
own. </li>
<li> 2:30 PM: Shortly after we finished building our packages, Ubuntu released theirs. </li>
<li> 3:45 PM: We had fixes rolled to all our Internet-facing servers. </li>
<li> 4:10 PM: The first public exploit code we know of was released. </li>
</ul>

<p> Since then, we’ve worked around the clock on rolling our SSL keys,
upgrading our internal servers, and revoking the old keys (all now
completed). We’ll be invalidating all existing login sessions shortly, so
don’t be surprised if you have to log back into your Stripe
account. We are also upgrading our client libraries to support
certificate revocation; we’ll post an update when this is done. </p>

<h2> What you should do </h2>

<p> Here are some concrete steps you should take to improve the security of your Stripe account: </p>

<ol>
<li><a href="https://manage.stripe.com/account">Change your password</a>: Remember to use a unique password rather than sharing across sites.</li>
<li><a href="../../country?country=CH&amp;redirect=%252Fblog%252Ftwo-step-verification">Enable two-step verification</a>: This will make it harder for attackers to access your account if your password is compromised.</li>
<li><a href="https://manage.stripe.com/account/apikeys">Rotate your API keys</a>: As an added security measure, we’ll start recommending that all our users roll their keys at least every 6 months.</li>
</ol>

<p> In the coming days, we’ll send out an email to all of our users describing these steps in more detail. </p>

<p> If you have any questions or concerns, please don’t hesitate to <a href="https://support.stripe.com/email">get in touch</a>. </p>

<h2> Further reading </h2>

<ul>
<li>
Matthew Green has a good <a href="http://blog.cryptographyengineering.com/2014/04/attack-of-week-openssl-heartbleed.html">blog post</a> explaining Heartbleed and its implications.
</li>
<li>
The <a href="https://news.ycombinator.com/item?id=7548991">Hacker News</a> thread about Heartbleed is quite informative.
<li>
<a href="http://www.janosgyerik.com/hacking-contest-on-a-live-cd/">Stripe CTF</a> and <a href="https://github.com/e28eta/stripe-ctf-2.0.git">Stripe CTF 2.0</a> both are good ways to get hands-on experience with security vulnerabilities like this.
</li>
<li>
Adam Langley’s <a href="https://www.imperialviolet.org">blog</a> is a great source on SSL internals. (Adam was incidentally one of the co-authors of the <a href="https://github.com/openssl/openssl/commit/96db9023b881d7cd9f379b0c154650d6c108e">Heartbleed patch</a>.)
</li>
</ul>


  </div>

  <footer>
    <p>
      April 9, 2014
    </p>
  </footer>
  
</article>
</div>


      <div id='blog-post--dynamic-descriptors'>
<article class=''>

  <header>
    <a class="picture" href="../../country?country=CH&amp;redirect=%252Fabout#jbalogh">
      <img src="../../img/about/team/jbalogh@2x.jpeg">
    </a>
    <h1><a href="../../country?country=CH&amp;redirect=%252Fblog%252Fdynamic-descriptors">Dynamic statement descriptions<br /></a></h1>
    <p>
      <a class="author" href="../../country?country=CH&amp;redirect=%252Fabout#jbalogh">Jeff Balogh</a>
      <span>on</span> March 14, 2014
    </p>
  </header>
  
  <div class="content">
    

  <p>You can now add a per-charge description—a “dynamic descriptor” in the industry jargon—to transactions on your customers’ credit card statements. We still recommend that you include your business name in your per-charge description, but the additional context can help reduce confusion, customer enquiries, and chargebacks.</p>

  <p>You can use the description for anything you like: the product purchased, the plan the customer subscribed to, or the name of the seller on a marketplace. To get started, just pass the <code>statement_descriptor</code> parameter when <a href="../../docs/api/index.html#create_charge">creating a charge</a>:</p>

  <pre><code>curl <span class="string">https://api.stripe.com/v1/charge <span class="meta">\</span>
  <span class="meta">-u</span> <span class="string">sk_test_mkGsLqEW6SLnZa487HYfJVLf</span><span class="meta">:</span> <span class="meta">\</span>
  <span class="meta">-d</span> <span class="kwd">customer</span>=<span class="string">cus_6SLnZan487He</span> <span class="meta">\</span>
  <span class="meta">-d</span> <span class="kwd">amount</span>=<span class="string">400</span> <span class="meta">\</span>
  <span class="meta">-d</span> <span class="kwd">currency</span>=<span class="string">usd</span> <span class="meta">\</span>
  <span class="meta">-d</span> <span class="kwd">statement_descriptor</span>="<span class="string">5K Race Ticket</span>"</span></code></pre>

  <p>You can also specify a <code>statement_descriptor</code> on a <a href="../../docs/api/index.html#plans">plan</a>. If you do this, all subscription charges created will automatically have this dynamic descriptor.</p>

  <p>We added this feature based on your feedback—if you’ve got other suggestions, we'd love to <a href="mailto:jbalogh+descriptors@stripe.com">hear from you</a>.</p>



  </div>

  <footer>
    <p>
      March 14, 2014
    </p>
  </footer>
  
</article>
</div>


      <div id='blog-post--checkout-new-features'>
<article class='white'>

  <header>
    <a class="picture" href="../../country?country=CH&amp;redirect=%252Fabout#mv">
      <img src="../../img/about/team/mv@2x.jpeg">
    </a>
    <h1><a href="../../country?country=CH&amp;redirect=%252Fblog%252Fcheckout-new-features">The new Checkout<br /></a></h1>
    <p>
      <a class="author" href="../../country?country=CH&amp;redirect=%252Fabout#mv">Michaël Villar</a>
      <span>on</span> March 5, 2014
    </p>
  </header>
  
  <div class="content">
    

  <div class="image-center">
    <img src="../../img/blog/posts/checkout-new-features/blog-post-hero.png" width="578" height="500" data-hires="true" class='checkout-img' />
  </div>

  <p>We launched the first version of the Checkout <a href="../../country?country=CH&amp;redirect=%252Fblog%252Fstripe-checkout">a year ago</a>. From the start, the goal has been to create best possible payments flow. Each site should not have to duplicate the work of device optimization and A/B testing. When you use Checkout, you have a team of Stripe engineers and designers continually optimizing your payment interface. Today, we’ve released <a href="../../country?country=CH&amp;redirect=%252Fcheckout">a new version of Checkout</a>.</p>

  <p>You should really play around with our <a href="../../country?country=CH&amp;redirect=%252Fcheckout">showcase</a> that demonstrates the UI. But, briefly, the new parts are:</p>

  <h2>Expanded address support</h2>
  <ul>
    <li>Our revamped address handling now supports separate billing and shipping addresses—one of the most common feature requests.</li>
    <li>Entering addresses is now streamlined—Stripe will automatically select the user’s country, and we can fill in their city and state when they enter a postal code.</li> 
    <li>We now support integrated billing address verification. This means that users are notified immediately if they’ve mistyped anything.</li>
  </ul>

  <h2>Even more device optimization</h2>
  <p>Mobile usage continues to explode. We’ve learned a lot about what works and what doesn’t over the past year, and we’ve redesigned Checkout from scratch for every device. Checkout is gorgeous on Android, iOS, Windows Phone, OS X, Windows, tablet, desktop, and mobile.</p>

  <h2>Remember me everywhere</h2>
  <p>We’ve added a small “Remember me” checkbox that allows your customers to save their payment info by providing a mobile phone number. This in turn enables a rapid checkout experience in the future on any site using Checkout. Stripe securely identifies your users via text message so they don’t have to retype their payment information or remember an additional password. We’ve been testing this for the past couple of months—our hypothesis was that it would increase conversion rates—and we’re delighted that it has been confirmed. In a recent test, a customer with their details saved was several times less likely to abandon their purchase than one without. You should watch our <a href="../../country?country=CH&amp;redirect=%252Fcheckout">demo</a> if you’re curious how it works.</p>

  <h2>Testing</h2>
  <p>We’ve already tested the above across thousands of sites and millions of transactions. We closely monitor conversion rates across every device and browser on an ongoing basis. Our goal is to identify opportunities to increase your revenue.</p>

  <h2>Get started</h2>
  <p>If you’ve already integrated Checkout, you get this new functionality without any additional work on your part. We’ve updated our <a href="../../country?country=CH&amp;redirect=%252Fdocs%252Fcheckout">documentation</a> with info on how to integrate our new features, like shipping addresses and pre-filling email addresses.</p>

  <p>If you’re ready to start, learn more about using <a href="../../country?country=CH&amp;redirect=%252Fcheckout">Checkout</a> or try our <a href="https://stripe.com/docs/checkout/tutorial">tutorial</a> to get up and running in minutes. If you have any feedback, we’d love to <a href="mailto:lachy.groom@stripe.com">hear</a> from you!</p>

  <p class="cta">
    Start accepting payments today. <a href="../../country?country=CH&amp;redirect=%252Fcheckout" class="button">Explore Checkout</a>
  </p>


  </div>

  <footer>
    <p>
      March 5, 2014
    </p>
  </footer>
  
</article>
</div>


      <div id='blog-post--events-in-melbourne-and-sydney'>
<article class=''>

  <header>
    <a class="picture" href="../../country?country=CH&amp;redirect=%252Fabout#susan">
      <img src="../../img/about/team/susan@2x.jpeg">
    </a>
    <h1><a href="../../country?country=CH&amp;redirect=%252Fblog%252Fevents-in-melbourne-and-sydney">Events in Melbourne and Sydney<br /></a></h1>
    <p>
      <a class="author" href="../../country?country=CH&amp;redirect=%252Fabout#susan">Susan Wu</a>
      <span>on</span> February 13, 2014
    </p>
  </header>
  
  <div class="content">
      <p>
    We're running our first set of events in Australia next
week. Hopefully you can come by for one or more!
  </p>

  <hr />
  
  <div class="multiple-events">

  <section class='event'>
    <aside>
      <time>Tue <span class='starts-with-one'>18</span></time>
      <a href='../../events/melbourne-tech-talk'>RSVP</a>
    </aside>
    <div>
      <h2><a href='../../events/melbourne-tech-talk'>Melbourne Tech Talk: Engineering that scales</a></h2>
      <p>
        Inspire9's Nathan Sampimon will moderate a conversation between Stripe CTO <a href="https://twitter.com/thegdb">Greg Brockman</a> and 99designs CTO <a href="https://twitter.com/lox">Lachlan Donald</a> about how the two companies have structured their engineering cultures to optimise for growth. Event starts at 6pm.
      </p>
    </div>
  </section>

  <section class='event'>
    <aside>
      <time>Wed <span style='text-indent:-4px'>19</span></time>
      <a href='http://www.meetup.com/The-Stripe-Meetup-Group-Australia/events/165905692/'>RSVP</a>
    </aside>
    <div>
      <h2><a href='http://www.meetup.com/The-Stripe-Meetup-Group-Australia/events/165905692/'>GitHub and Stripe Drinks in Sydney</a></h2>
      <p>
        In honour of this year’s <a href="http://www.rubyconf.org.au/">RubyConf</a>, we're coming together with GitHub to co-host drinks at the King Street Brewhouse on Wednesday 19 February. Come by starting at 8pm for a beer on us and to catch up with Australia's developer&nbsp;community.
      </p>
    </div>
  </section>

  <section class='event'>
    <aside>
      <time>Thu <span>20</span></time>
      <a href='http://goo.gl/maps/MZoea'>Map</a>
    </aside>
    <div>
      <h2>Office Hours in Sydney at ATP Innovations/Startmate HQ</h2>
      <p>
        Need specific integration help or have questions about getting started with Stripe? Come to our open office hours where we'll help answer any questions you may have. We'll be available from 5-6 PM on a first come, first serve basis.
      </p>
    </div>
  </section>

  <section class='event'>
    <aside>
      <time>Thu <span>20</span></time>
      <a href='../../events/sydney-tech-talk'>RSVP</a>
    </aside>
    <div>
      <h2><a href='../../events/sydney-tech-talk'>Sydney Tech Talk: Engineering that scales</a></h2>
      <p>
        Join Greg and Startmate/Blackbird Ventures' Partner <a href="https://twitter.com/nikiscevak">Niki Scevak</a> for an interactive conversation about building an engineering organisation that can scale to billions of dollars in transactions. Come prepared with questions, since we'll open the floor for Q&A. Event starts at&nbsp;6pm.
      </p>
    </div>
  </section>

  <section class='event'>
    <aside>
      <time>Fri <span style='text-indent:3px'>21</span></time>
      <a href='http://lanyrd.com/2014/rubyconf-au/sctthz/'>Details</a>
    </aside>
    <div>
      <h2><a href='http://lanyrd.com/2014/rubyconf-au/sctthz/'>Keynote at RubyConf</a></h2>
      <p>
        Greg will discuss what the developer community needs to do in order to maintain Ruby's position in the long run. Talk starts at 9am. After the talk, come hang out with us in the conference lobby &mdash; we'll be happy to chat about Stripe, Ruby, or anything else that's on your mind.
      </p>
    </div>
  </section>

  </div>

  <hr />

  <p>
    Have questions about Stripe in Oz? <a href='mailto:susan+feedback@stripe.com'>Email me</a>. We're looking forward to seeing you!
  </p>

  </div>

  <footer>
    <p>
      February 13, 2014
    </p>
  </footer>
  
</article>
</div>


      <div id='blog-post--new-currencies'>
<article class='white'>

  <header>
    <a class="picture" href="../../country?country=CH&amp;redirect=%252Fabout#thairu">
      <img src="../../img/about/team/thairu@2x.jpeg">
    </a>
    <h1><a href="../../country?country=CH&amp;redirect=%252Fblog%252Fnew-currencies">135 new currencies<br /></a></h1>
    <p>
      <a class="author" href="../../country?country=CH&amp;redirect=%252Fabout#thairu">Thairu</a>
      <span>on</span> February 11, 2014
    </p>
  </header>
  
  <div class="content">
    <div class="image-center">
<img class='currencies' src='../../img/blog/posts/multicurrency/currencies.png' width='534' height='94' data-hires='true' />
</div>

<p>As the internet’s global reach grows, Stripe users increasingly sell to worldwide audiences. Companies like <a href="http://www.dailymotion.com">DailyMotion</a> in Paris, <a href="http://www.hubspot.com">HubSpot</a> in Boston, and <a href="http://www.ti.to">Tito</a> in Dublin build products that are popular everywhere, not just in their home markets.</p>

<p>Starting today, businesses using Stripe in the US and Europe can accept payments in <a href="https://support.stripe.com/questions/in-which-currencies-can-i-charge-my-customers">139 currencies</a>. You can create charges in any of these currencies, and we'll automatically handle converting and transferring funds to you in your home currency. Currency conversion incurs a 2% fee atop market exchange rates.</p>

<p>With this change, you can easily tailor your pricing for different geographies. Localized pricing increases checkout completion rates by eliminating uncertainty for your customers and letting them avoid conversion fees.</p>

<p>You don’t need to do anything to enable this in your account—you can simply start passing the currencies throughout the API:</p>

<pre><code><span class="meta">curl</span> <span class="string">https://api.stripe.com/v1/charges</span> <span class="meta">\</span>
  <span class="meta">-u</span> <span class="string">sk_test_mkGsLqEW6SLnZa487HYfJVLf</span><span class="meta">: \</span>
  <span class="meta">-d</span> <span class="kwd">amount</span><span class="meta">=</span><span class="string">3000</span> <span class="meta">\
  -d</span> <span class="kwd">currency</span><span class="meta">=</span><span class="string">cny</span> <span class="meta">\
  -d</span> <span class="kwd">description</span><span class="meta">=</span><span class="string">"Premium plan" </span><span class="meta">\
  -d</span> <span class="kwd">customer</span><span class="meta">=</span><span class="string">cus_X3he9Ex2Aenkc</span></code></pre>

<p>The currency conversion rate is calculated in real-time and can be immediately checked by retrieving the relevant <a href="../../docs/api/index.html#retrieve_balance_transaction">balance transaction</a> via the API or just by navigating to the charge in the dashboard.</p>

<p>Particular thanks to our beta testers for helping us refine this feature, especially <a href="http://www.couchsurfing.org">Couchsurfing</a> and <a href="http://www.edmodo.com">Edmodo</a>. As ever, we’d <a href="mailto:thairu+currencies@stripe.com">love to hear</a> your feedback!</p>

  </div>

  <footer>
    <p>
      February 11, 2014
    </p>
  </footer>
  
</article>
</div>


      <div id='blog-post--ctf3-architecture'>
<article class=''>

  <header>
    <a class="picture" href="../../country?country=CH&amp;redirect=%252Fabout#gdb">
      <img src="../../img/about/team/gdb@2x.jpeg">
    </a>
    <h1><a href="../../country?country=CH&amp;redirect=%252Fblog%252Fctf3-architecture">CTF3 architecture<br /></a></h1>
    <p>
      <a class="author" href="../../country?country=CH&amp;redirect=%252Fabout#gdb">Greg Brockman</a>
      <span>on</span> February 4, 2014
    </p>
  </header>
  
  <div class="content">
    
  <p> In
    philosophy, <a href="../../country?country=CH&amp;redirect=%252Fblog%252Fctf3-launch">CTF3</a>
    was the same as our previous CTFs: we gave people a chance to
    solve problems they normally would only get to read
    about. However, in terms of infrastructure, this was by far our
    most complex CTF: we needed to build, run, and test arbitrary
    distributed systems code. In the course of the week it was live,
    our 7,500 participants pushed over 640,000 times, meaning we
    needed a scalable and robust architecture that provided isolation
    between users. </p>

  <p> Participants have released a
    <a href="https://github.com/kratorius/stripe-ctf3">number</a>
    <a href="http://tullo.ch/articles/stripe-ctf-golfing/">of</a>
    <a href="http://muehe.org/posts/stripe-ctf-3-writeup/">walkthroughs</a>
    <a href="http://blog.joneisen.me/post/75008410654">for</a>
    <a href="http://daniel.fone.net.nz/blog/2014/01/31/laziest-possible-solutions-for-stripes-ctf/">the</a>
    <a href="https://github.com/xthexder/stripe-ctf-3.0">actual</a> levels,
    so we won't be releasing official solutions here. Instead, we'll
    give you a tour of how we made the systems work. (If you'd prefer
    to see this in video form, we've just released the video from our
    <a href="http://youtu.be/zktac6QKzUk">CTF3 wrapup</a>.) </p>

  <p> As an aside, the architecture for CTF reflects a lot of what
    we've learned in building Stripe. If you're interested in this
    kind of thing, <a href="../../jobs/index.html#engineer">we're hiring</a> engineers
    in San Francisco and remotely within US timezones. I also wrote
    a <a href="http://www.quora.com/Stripe-company/What-engineering-problems-and-challenges-is-Stripe-solving">Quora
    post</a> about the problems we're working on. (It turns out we do
    things besides just building CTFs :).) </p>

  <h2> Overview </h2>

  <p> CTF3 consisted
    of <a href="https://github.com/ctfs/write-ups/tree/master/stripe-ctf3">five
      levels</a>. Most of the levels looked pretty similar from a high
    level: the user would push some code to us, we'd run it in a sandbox
    environment, and then we'd return a score. The one exception was
    the <a href="https://github.com/ctfs/write-ups/tree/master/stripe-ctf3/level1">Gitcoin</a>
    level, where we would just validate Git commits people had mined
    locally (or on their cloud vendor). </p>

  <p> Code was submitted to us in the simplest possible way: you just
    ran <code>git push</code>. On the backend, we received your code
    via <a href="http://git-scm.com/docs/git-shell.html"><code>git-shell</code></a>
    and used wrappers and commit hooks to implement the CTF-specific
    logic. </p>

  <p> The "wrappers and commit hooks" had lot of moving parts,
    though. One important design goal was to decouple components and
    make it possible to horizontally scale any given piece of the
    system. Stateful pieces were few in number and were constrained to
    be low volume. In the following sections, we'll go into detail about
    how all the pieces worked, but here's how things roughly fit
    together: </p>

<div class="image-center">
<a href="../../img/blog/posts/ctf3-architecture/servers.png" class="zoom img" maxSize="605x397"><img width="500" src="../../img/blog/posts/ctf3-architecture/servers.png"></a>
</div>

  <h2> Submission pipeline </h2>

  <p> Wondering what actually happened after you ran git push? The
    following steps were common between all levels. </p>

  <ol>
    <li>
      <p> You resolved <code>stripe-ctf.com</code> to the public IP for
	one of our <code>gate</code> frontend servers.
      </p>
    </li>

    <li> 
      <p>
	You connected to port 22 on your chosen gate server. An
	<a href="http://haproxy.1wt.eu/"><code>haproxy</code></a> daemon
	load-balanced your traffic to one of our <code>submitter</code>
	boxes. We had three submitter boxes in the pool for much of the
	event.
      </p>

      <p>
	As an optimization, the load balancing used IP stickiness to route
	you to the same submitter backend on each connection. The
	submitters were mostly stateless: all that they held was the code
	you were pushing and
	convenience <a href="http://git-scm.com/book/en/Git-Basics-Tagging">tags</a>
	for each submission. If you'd committed a large blob though, being
	routed to the same submitter was nice since you wouldn't have to
	re-upload it on each push.
      </p>

      <p> In previous CTFs, rather than load balancing, we'd just exposed
	our machine hostnames (so you'd connect to directly to
	e.g. <code>level0-01.stripe-ctf.com</code>). In that case, it was
	hard to drop a machine out of the pool or rebalance
	traffic. Controlling the load balancing here gave us operational
	flexibility at the cost of additional constraints on our system
	design (e.g. haproxy knew only your IP address, so we couldn't do
	stickiness based on username). </p>
    </li>

    <li>
      <p> The public-facing sshd on your chosen submitter received the
	username we'd given you in the web interface, which looked
	like <code>lvl0-ohngii5M</code>. </p>

      <p> We'd configured our PAM stack to
	use <a href="http://wiki.debian.org/LDAP/NSS#NSS_Setup_with_libnss-ldapd">LDAP</a>. So
	we could share the user database with the web interface, we put
	together a quick-and-dirty LDAP server implementation
	(called <a href="https://github.com/stripe-ctf/fakeuser">fakeuser</a>)
	to grab usernames directly out of our central database. The users
	had empty passwords, which (given appropriate settings
	in <a href="https://github.com/stripe-ctf/ctf-3-snippets/blob/master/ssh/sshd_config"><code>sshd.conf</code></a>
	and PAM) meant that you could log in without pasting a password or
	giving us your SSH key. Of course, the downside was that your
	username became a secret credential. </p>
    </li>

    <li>
      <p> At this point the sshd ran your user's shell, which was a custom
	script in <code>/usr/local/bin/login-shell</code>. The shell was
	pretty simple: it set some environment variables, took out
	an <a href="http://linux.die.net/man/1/flock"><code>flock</code></a>
	on a per-user file, and then (conceptually) ran a bunch of Ruby code
	that did all of the level-specific work.
      </p>

      <p> At first, we'd actually spawn a new Ruby interpreter and load
	our code on each login. This turned out to be untenable. First of
	all, loading <a href="http://bundler.io/">Bundler</a> plus all our
	code took a few seconds, which was way too slow for a login
	session. So we split out the code intended for just the login
	session into a module we called <code>CTF3NoBundler</code>. This was
	painful to manage, and meant the no-bundler code couldn't use most
	of the libraries we were writing over in Bundler-land. </p>

      <p> Even with this split, it still took about 100-200 milliseconds
	to load our code, which was effectively all CPU time. When we tested
	continuously running about 20 concurrent logins, the submitter box
	ground to a halt under the load. We effectively DOSed ourselves
	through the work of loading the same code over and over again. </p>

      <p> At this point, perhaps the most obvious thing to do would be to
	rewrite in a faster-loading language. However, there's actually a
	decent amount of code involved in submission, and there was nothing
	wrong with the code once it was up and running. So instead, we
	decided to try a load-once, fork-for-each-login model. We took a
	look at using <a href="https://github.com/burke/zeus">Zeus</a> for
	this purpose. It's a cool tool, but unfortunately it's aimed at
	development rather than production, and doesn't have the kind of
	robust failure handling we'd need for something as core as this. So
	instead, we wrote a simpler implementation based off similar ideas,
	called <a href="https://github.com/stripe-ctf/poseidon">Poseidon</a>. </p>
    </li>
  </ol>

  <h2> Standard pipeline </h2>

  <p> Here's the point at which Gitcoin and the standard pipelines
    diverged. The remainder of the standard submission pipeline looked
    like the following: </p>

  <ol>
    <li>
      <p> Next, we constructed your user's level repository (that is, the
	actual repository that you would clone) if it didn't already exist
	on disk. This lazy assembly meant we didn't have to waste disk space
	on users until they'd actually fetched some code. </p>
    </li>

    <li> <p> In the case of a pull, we would just run git-shell and be
	done with it. Pushes had a lot more going on, however. </p></li>

    <li> <P> In order to make submission as easy to test drive as
	possible, we wanted it to be possible to <code>git push</code>
	straight from a fresh clone. So before running git-shell, we
	played
	some <a href="https://github.com/stripe-ctf/ctf-3-snippets/blob/master/ruby/standard_submitter_shell.rb#L20-L48">branch
	  renaming</a> tricks. </p>
    </li>

    <li>
      <p> We then invoked git-shell, which in turn invoked
	a <a href="http://git-scm.com/book/ch7-3.html#Server-Side-Hooks"><code>post-receive</code></a>
	hook. The hook was also implemented as a Poseidon client for fast
	boot. </p> </li>

    <li> 
      <p> The post-receive code in the Poseidon master then served as
	the coordinator of your scoring run. First, it called to a
	<code>test_case_assigner</code> service, which ran on the
	singleton <code>colossus</code> server. For this and other
	services which required synchronous responses, we used the Ruby
	Thrift abstractions we use internally at Stripe. </p>

      <p> The test_case_assigner simply grabbed some free test case
	records from the database, marked them as allocated, and then
	returned the resulting cases. These test cases were originally
	created by the <code>test_case_generator</code> daemon (running on
	the <code>testasaurus</code> boxes &mdash; ok, we ran out of good
	names at some point). The generator simply ran our benchmark
	solution against random test cases. We stored metadata in our
	database, with the actual blob data stored on S3 so your client
	could later download it. </p>
    </li>

    <li>
      <p> Once the post-receive hook had its test cases, it started
	listening on two new <a href="http://www.rabbitmq.com/">RabbitMQ</a>
	queues: one for results and one for output to display to the
	user. The hook then submitted
	a <a href="https://github.com/stripe-ctf/ctf-3-snippets/blob/master/ruby/build_rpc.rb">build
	  RPC</a> over RabbitMQ. We used RabbitMQ as a buffer for RPCs that we
	expected might get backed up, or where a synchronous response wasn't
	needed. </p>
    </li>

    <li>
      <p> At the other end of the queue was a <code>builder</code> daemon,
	running on one of our aptly-named <code>build</code> boxes. Upon
	receiving the RPC, the daemon fetched the code from the relevant
	submitter's <a href="https://www.kernel.org/pub/software/scm/git/docs/git-daemon.html"><code>git-daemon</code></a>
	into a temporary directory. </p>

      <p> The builder then asked a central <code>build_cacher</code>
	Thrift service if the built commit was cached. Assuming not, the
	builder spawned a <a href="https://www.docker.io/">Docker</a>
	container with your code mounted at your user's home directory and
	ran <code>./build.sh</code> in the container. We then streamed back
	the
	first <a href="https://github.com/stripe-ctf/ctf-3-snippets/blob/master/ruby/rpc.rb#L17-L61">few
	  hundred KB</a> of output. </p>

      <p> The builder
	then <a href="http://www.cyberciti.biz/faq/how-do-i-compress-a-whole-linux-or-unix-directory/"><code>tarred</code></a>
	up your output directory and generated a RabbitMQ score RPC for
	each test case. The score RPC contained a URL to fetch the tarball
	from an <a href="http://nginx.org/"><code>nginx</code></a> running
	on the build box. Finally, the builder uploaded the built tarball
	to S3 and informed the build_cacher about the new SHA1. </p>

      <p> In the cached case, the builder just short-circuited this logic
	and sent the score RPCs right away. </p>
    </li>

    <li>
      <p> Each score RPC was serviced by an <code>executor</code> daemon
	on a <code>worker</code> box. The executor fetched the build product
	and then spawned a new container with the code mounted into it. It
	then (finally!) ran your code, again streaming output back to
	you. Once complete, the executor determined the results of your
	trial and then sent a result RPC back to the post-receive hook. </p>
    </li>

    <li>
      <p> The post-receive hook aggregated your results and from there
	compiled a final result. It sent a single <code>FinalScoreRPC</code>
	representing the results of the test run to RabbitMQ. </p>
    </li>

    <li>
      <p> At the other end of the wire, a <code>resulter</code> daemon
	hung around on the colossus box waiting to consume the
	FinalScoreRPC. Upon consuming the RPC, it updated your user's high
	score. </p>
    </li>
</ol>

<h2> Gitcoin pipeline </h2>

<p> Gitcoin had its own architecture. Since we didn't need to run any
  of your code (we just needed to validate the purported Gitcoin), we
  could get by with a lot less complexity. </p>

<h3> Our mining bots </h3>

<p> To clear the level, you just needed to mine faster than our
  bots. The obvious design is to spawn a new miner for each
  end-user. However, this would be pretty expensive, as we'd have to
  be mining hundreds of Gitcoins at any one time. </p>

<p> So instead, we had miners on a single central repository on
  the <code>gitcoin</code> box, which produced a steady stream of
  Gitcoins. Each submitter had a <code>gitcoin</code> daemon whose job
  was to periodically fetch from the central repository and then release
  at most one new commit to a machine-local Gitcoin instance. </p>

<p> We'd started out with a coin release frequency of <code>25 +
    rand(20)</code> seconds, but after seeing how many people were
  struggling to mine that quickly, we dropped the frequency to a
  flat 90 seconds. </p>

<p> When you pushed, we had a
  git <a href="http://git-scm.com/book/ch7-3.html#Server-Side-Hooks"><code>update</code></a>
  hook which would perform a bunch
  of <a href="https://github.com/stripe-ctf/ctf-3-snippets/blob/master/ruby/update_hook.rb#L324-L335">sanity
    checks</a> to ensure it was a valid Gitcoin. Once your commit was
  accepted, the bots had to stop because our pre-mined Gitcoins
  wouldn't apply cleanly to your repository. </p>

<h3> Gitcoin bonus round </h3>

<p> In this round, we pitted everyone together in a master Gitcoin
  instance. Conveniently for us, we didn't have to run our own miners,
  since people provided plenty of competition against each other. </p>

<p> The architecture here was a single shared (created
  using <a href="https://www.kernel.org/pub/software/scm/git/docs/git-init.html"><code>git
      init --bare --shared=all</code></a>) global Gitcoin repository on
  the gitcoin box. The submitters maintained their own clone of this
  repository. </p>

<p> On pull, you just hit the submitter repository. On push, the
  commit was validated by the submitter, which then pushed (via a new
  SSH connection) to the backend gitcoin box. If the backend push was
  successful, a Thrift service on the gitcoin box would synchronously
  push the new commit to all other submitters. </p>

<p> One consequence of this architecture was that submitting Gitcoins
  was decently slow &mdash; we weren't maintaining persistent
  connections to the backend gitcoin server, so there was a decent
  amount of overhead. We compensated for this by tuning the difficulty
  to ensure the time to mine a coin was large compared to the time to
  complete a push. By the contest's end, the difficulty
  was <code>0000000005</code>, a full 4 (!) orders of magnitude harder
  than the difficulty we'd started with. </p>

<hr />

<p> I hope you had as much fun playing CTF3 as we had building it. If
  you're curious about any details I didn't cover here, feel free
  to <a href="mailto:gdb@stripe.com">send me an email</a>. </p>


  </div>

  <footer>
    <p>
      February 4, 2014
    </p>
  </footer>
  
</article>
</div>


      <div id='blog-post--multiple-subscriptions'>
<article class=''>

  <header>
    <a class="picture" href="../../country?country=CH&amp;redirect=%252Fabout#jim">
      <img src="../../img/about/team/jim@2x.jpeg">
    </a>
    <h1><a href="../../country?country=CH&amp;redirect=%252Fblog%252Fmultiple-subscriptions">Multiple subscriptions<br /></a></h1>
    <p>
      <a class="author" href="../../country?country=CH&amp;redirect=%252Fabout#jim">Jim Danz</a>
      <span>on</span> February 4, 2014
    </p>
  </header>
  
  <div class="content">
    
<p>Stripe has offered subscription billing functionality from day 1.  From day 2, we’ve been hearing requests to support more than one active subscription per customer. Much like we did with cards <a href="../../country?country=CH&amp;redirect=%252Fblog%252Fmultiple-cards">last July</a>, you can now (finally!) create, retrieve, list, update, and delete <a href="../../docs/api/index.html#subscriptions">subscriptions</a> as first-class API resources on <code>customers</code>:</p>

<pre><code><span class="meta">curl</span> <span class="string">https://api.stripe.com/v1/customers/cus_3R12DmsmM9/subscriptions</span> <span class="meta">\</span>
  <span class="meta">-u</span> <span class="string">sk_test_mkGsLqEW6SLnZa487HYfJVLf</span><span class="meta">:</span> <span class="meta">\</span>
  <span class="meta">-d</span> <span class="kwd">plan</span>=<span class="string">extra_bandwidth_package</span></code></pre>

<p>Subscriptions can also be managed from the dashboard and there’s full support for per-subscription invoices, invoice items, and discounts.</p>

<p>As with a lot of what we launch, this has been in the works for a while, and many early testers provided great feedback—thanks to all of you, and especially to Michael Belfrage from <a href="http://www.udacity.com/">Udacity</a>. (If you’d like to test out their integration, just enroll in multiple Udacity courses. Personally, I recommend <a href="https://www.udacity.com/course/cs101">CS101</a> and <a href="https://www.udacity.com/course/cs271">CS271</a>.)</p>

<p>Our <a href="../../docs/api/index.html">API documentation</a> has been updated to reflect these changes, but if you’re an existing user looking to see exactly what’s new, <a href="https://support.stripe.com/questions/whats-new-with-multiple-subscriptions-per-customer-january-2014">this overview</a> might be useful.</p>

<p>Lastly, if you’re interested in testing out new functionality like this in the future, you may find it useful to subscribe to our <a href="https://groups.google.com/a/lists.stripe.com/forum/#!forum/api-discuss">api-discuss</a> mailing list. (Fortunately, the list also supports multiple subscriptions.) And if you have any feedback, please <a href="mailto:jim.danz@stripe.com">let me know</a>!</p>

  </div>

  <footer>
    <p>
      February 4, 2014
    </p>
  </footer>
  
</article>
</div>



    <footer id="blog-footer">
    <nav>

      <a href="../../country?country=CH&amp;redirect=%252Fblog%252Fpage%252F7" class="older-posts">Older posts<!--Page 7--></a>

      <a href="../../country?country=CH&amp;redirect=%252Fblog%252Fpage%252F5" class="newer-posts">Newer posts<!-- Page 5--></a>

    </nav>
  </footer>



        <footer id="main-footer" class="">
  <div class='inner-col'>
    <p>&copy; Stripe</p>

      <div class="country-selector">
          <a class="select">
              <span>
                  <img width="23" height="17" alt="Switzerland" src="../../img/flags/ch.png" data-hires="true" />
                  <strong>Switzerland</strong>
              </span>
          </a>

          <ul>
              <li >
                <a href="../../country?country=AU&amp;redirect=%252Fblog%252Fpage%252F6" >
                  <img width="23" height="17" alt="Australia" src="../../img/flags/au.png" data-hires="true" />
                  <span>Australia</span>
                </a>
              </li>
              <li >
                <a href="../../country?country=CA&amp;redirect=%252Fblog%252Fpage%252F6" >
                  <img width="23" height="17" alt="Canada" src="../../img/flags/ca.png" data-hires="true" />
                  <span>Canada</span>
                </a>
              </li>
              <li >
                <a href="../../country?country=DK&amp;redirect=%252Fblog%252Fpage%252F6" >
                  <img width="23" height="17" alt="Denmark" src="../../img/flags/dk.png" data-hires="true" />
                  <span>Denmark</span>
                </a>
              </li>
              <li >
                <a href="../../country?country=FI&amp;redirect=%252Fblog%252Fpage%252F6" >
                  <img width="23" height="17" alt="Finland" src="../../img/flags/fi.png" data-hires="true" />
                  <span>Finland</span>
                </a>
              </li>
              <li >
                <a href="../../country?country=GB&amp;redirect=%252Fblog%252Fpage%252F6" >
                  <img width="23" height="17" alt="United Kingdom" src="../../img/flags/gb.png" data-hires="true" />
                  <span>United Kingdom</span>
                </a>
              </li>
              <li >
                <a href="../../country?country=IE&amp;redirect=%252Fblog%252Fpage%252F6" >
                  <img width="23" height="17" alt="Ireland" src="../../img/flags/ie.png" data-hires="true" />
                  <span>Ireland</span>
                </a>
              </li>
              <li >
                <a href="../../country?country=NO&amp;redirect=%252Fblog%252Fpage%252F6" >
                  <img width="23" height="17" alt="Norway" src="../../img/flags/no.png" data-hires="true" />
                  <span>Norway</span>
                </a>
              </li>
              <li >
                <a href="../../country?country=SE&amp;redirect=%252Fblog%252Fpage%252F6" >
                  <img width="23" height="17" alt="Sweden" src="../../img/flags/se.png" data-hires="true" />
                  <span>Sweden</span>
                </a>
              </li>
              <li >
                <a href="../../country?country=US&amp;redirect=%252Fblog%252Fpage%252F6" >
                  <img width="23" height="17" alt="United States" src="../../img/flags/us.png" data-hires="true" />
                  <span>United States</span>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=AT&amp;redirect=%252Fblog%252Fpage%252F6" >
                  <img width="23" height="17" alt="Austria" src="../../img/flags/at.png" data-hires="true" />
                  <span>Austria</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=BE&amp;redirect=%252Fblog%252Fpage%252F6" >
                  <img width="23" height="17" alt="Belgium" src="../../img/flags/be.png" data-hires="true" />
                  <span>Belgium</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=BR&amp;redirect=%252Fblog%252Fpage%252F6" >
                  <img width="23" height="17" alt="Brazil" src="../../img/flags/br.png" data-hires="true" />
                  <span>Brazil</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=FR&amp;redirect=%252Fblog%252Fpage%252F6" >
                  <img width="23" height="17" alt="France" src="../../img/flags/fr.png" data-hires="true" />
                  <span>France</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=DE&amp;redirect=%252Fblog%252Fpage%252F6" >
                  <img width="23" height="17" alt="Germany" src="../../img/flags/de.png" data-hires="true" />
                  <span>Germany</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=IT&amp;redirect=%252Fblog%252Fpage%252F6" >
                  <img width="23" height="17" alt="Italy" src="../../img/flags/it.png" data-hires="true" />
                  <span>Italy</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=JP&amp;redirect=%252Fblog%252Fpage%252F6" >
                  <img width="23" height="17" alt="Japan" src="../../img/flags/jp.png" data-hires="true" />
                  <span>Japan</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=LU&amp;redirect=%252Fblog%252Fpage%252F6" >
                  <img width="23" height="17" alt="Luxembourg" src="../../img/flags/lu.png" data-hires="true" />
                  <span>Luxembourg</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=MX&amp;redirect=%252Fblog%252Fpage%252F6" >
                  <img width="23" height="17" alt="Mexico" src="../../img/flags/mx.png" data-hires="true" />
                  <span>Mexico</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=NL&amp;redirect=%252Fblog%252Fpage%252F6" >
                  <img width="23" height="17" alt="Netherlands" src="../../img/flags/nl.png" data-hires="true" />
                  <span>Netherlands</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=PT&amp;redirect=%252Fblog%252Fpage%252F6" >
                  <img width="23" height="17" alt="Portugal" src="../../img/flags/pt.png" data-hires="true" />
                  <span>Portugal</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=SG&amp;redirect=%252Fblog%252Fpage%252F6" >
                  <img width="23" height="17" alt="Singapore" src="../../img/flags/sg.png" data-hires="true" />
                  <span>Singapore</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=ES&amp;redirect=%252Fblog%252Fpage%252F6" >
                  <img width="23" height="17" alt="Spain" src="../../img/flags/es.png" data-hires="true" />
                  <span>Spain</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=CH&amp;redirect=%252Fblog%252Fpage%252F6" class="selected">
                  <img width="23" height="17" alt="Switzerland" src="../../img/flags/ch.png" data-hires="true" />
                  <span>Switzerland</span>
                    <em>Beta</em>
                </a>
              </li>
            <li class='notify-signup-link'>
              <a href='../../pt'>
                Stripe is expanding, more countries <span class='arrow'>coming soon</span>
              </a>
            </li>
          </ul>

      </div>

    <ul>
      <li><a href="../../pricing">Pricing</a></li>
      <li><a href="1"><span>Blog</span></a></li>
      <li><a href="https://status.stripe.com"><span>API Status</span></a></li>
      <li><a href="../../country?country=CH&amp;redirect=%252Fabout">About</a></li>
      <li><a href="../../jobs/index.html"><span>Jobs</span></a></li>
      <li><a href="../../country?country=CH&amp;redirect=%252Fopen-source">Open Source</a></li>
      <li><a href="../../country?country=CH&amp;redirect=%252Fcontact">Contact</a></li>
      <li><a href="../../terms">Privacy&nbsp;&amp;&nbsp;Terms</a></li>
    </ul>
  </div>
</footer>

      </div>

    </div>

    

    <script src="../../assets/config-aead70c07cdca45cec67e4141bf18edc.js"></script>
    
<script type="application/json" id="analytics_config">{&quot;mixpanel&quot;:{&quot;identifier&quot;:&quot;eb71b6171a4f7ed97de9b7a0395b7ca5&quot;},&quot;ga&quot;:{},&quot;trackpage&quot;:true}</script>

<script src="https://js.stripe.com/internal/v2/analytics.min.js"></script>
<script src="../../assets/analytics-0ea5a2b2ad899260c73440d84f5ab7bc.js"></script>

    <script type="text/javascript">
      Analytics.viewed("blog");
    </script>

  </body>
</html>
