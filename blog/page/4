<!DOCTYPE html>
<html lang="en" id="blog" class="tablet mobile">
  <head>
    <meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="google-site-verification" content="f0LCrdI6z4Fo8zld4sHCgo5SiUE4EYYRUa6KVeX3Mw8" />

<meta name="description" content="Follow the Stripe blog for product announcements, feature updates, new countries, and technical posts about payments." />

<link rel="shortcut icon" href="../../favicon.ico">

<link rel="apple-touch-icon-precomposed" href="../../img/apple-touch-icon/152x152.png?2" />
<link rel="apple-touch-icon-precomposed" sizes="120x120" href="../../img/apple-touch-icon/120x120.png?2" />

  <meta property="og:image" content="https://stripe.com/img/open-graph/logo.png?2" />
  <link rel="image_src" type="image/png" href="../../img/open-graph/logo.png?2"/>

<link rel="stylesheet" href="https://cloud.typography.com/711858/764882/css/fonts.css" />
<link rel="stylesheet" href="../../assets/shared-site-aec6cecd411e700a28df6c9943d37801.css" />
  <link rel="stylesheet" href="../../assets/blog-ada6c3a77cd627b09ac436c3a82dd49d.css">
  <link rel="stylesheet" href="../../assets/blogposts-b9a9b6ffe0287dc66146bd753faba55d.css">


<!--[if lt IE 9]>
<script src="/assets/html5shiv-17761200a17ebcb716dda86cca6d2472.js"></script>
<![endif]-->

<script src="../../assets/shared-site-68b6ee96f2b06c9ee69778bf0979b5fb.js"></script>
  <script src="../../assets/blog-776e3ed92eef5022ed98688d349fd7af.js"></script>
  <script src="../../assets/zoom-3a00e8ab5b6e3ee875d7dc1bbfe183c3.js"></script>


  <link rel="alternate" type="application/rss+xml" title="RSS" href="../feed.rss" />
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />

    <title>    Stripe Blog
</title>
    <meta content="OaZL0aOQokJdOeJS_lZkkGtMyb8m2HLHEpbYv9k8lXuxjE4SuvPn8q4puIKgLNgbU_EzVzezpv_bjE_TWDEx4Q==" name="csrf-token" />
  </head>
  <body id="" class="">
    <div id="main">

      <header id="main-header" class=''>
  <div class="inner-col">
    <h1><a href="../../country?country=CH&amp;redirect=%252F" title="Stripe"></a></h1>
    <nav>
      <ul class="pages">
        <li class="home"><a href="../../country?country=CH&amp;redirect=%252F">Home</a></li>
        <li class="features"><a href="../../features">Features</a></li>
        <li class='pricing'><a href="../../pricing">Pricing</a></li>
        <li class="more">
            <span>Products</span>
            <ul>
              <li><a href='../../country?country=CH&amp;redirect=%252Fcheckout'>Checkout</a></li>
              <li><a href='../../country?country=CH&amp;redirect=%252Fsubscriptions'>Subscriptions</a></li>
              <li><a href='../../country?country=CH&amp;redirect=%252Frelay'>Relay</a></li>
              <li><a href='../../marketplaces'>Connect</a></li>
              <li><a href='../../country?country=CH&amp;redirect=%252Fbitcoin'>Bitcoin</a></li>
              <li><a class="new" href='../../atlas/index.html'>Atlas</a></li>

              <li class='separator'><a href="../../country?country=CH&amp;redirect=%252Fgallery">Gallery</a></li>
              <li><a href="1">Blog</a></li>
              <li><a href="../../country?country=CH&amp;redirect=%252Fabout">About</a></li>
              <li><a href="../../jobs/index.html">Jobs</a></li>
            </ul>
        </li>
      </ul>
      <ul class="external">
        <li><a href="../../docs.1">Documentation</a></li>
        <li><a href="https://support.stripe.com">Help &amp; Support</a></li>

        <li class="button">
          <a data-adroll-segment='submit_two' href="https://dashboard.stripe.com/login">Sign in</a>
        </li>
      </ul>
    </nav>
  </div>
</header>


      <div id="main-content">
        
  <header id="blog-header">
  	<h1><a href="1">Blog</a></h1>
  	<p><a href="https://twitter.com/stripe">Follow Stripe on Twitter</a></p>
  </header>
  
      <div id='blog-post--mayday'>
<article class=''>

  <header>
    <a class="picture" href="../../country?country=CH&amp;redirect=%252Fabout#avi">
      <img src="../../img/about/team/avi@2x.jpeg">
    </a>
    <h1><a href="../../country?country=CH&amp;redirect=%252Fblog%252Fmayday">Mayday.us<br /></a></h1>
    <p>
      <a class="author" href="../../country?country=CH&amp;redirect=%252Fabout#avi">Avi Bryant</a>
      <span>on</span> November 4, 2014
    </p>
  </header>
  
  <div class="content">
    <p>
Earlier this year, after raising $1M in May, Lawrence Lessig’s <a href="http://mayday.us">Mayday PAC</a> announced an ambitious goal to raise $5M by the 4th of July—a goal which they met mere hours before the deadline.
</p>

<p>
One of the remarkable things about this campaign is how transparent they’ve been through the whole process. In August, they <a href="http://blog.mayday.us/post/98259998165/our-fundraising-so-far">released</a> anonymized records of all contributions from the prior three months to “enable researchers to study the pattern and nature of the contributions” they received.
</p>

<p>
Stripe helps Mayday to accept credit card payments, and with Mayday’s blessing, we did some digging of our own into the data relating to their $5M campaign. While we couldn’t look at every contribution (only those made using credit cards), we were able to discover certain patterns that wouldn’t necessarily show up in the published data set. We’d like to share here some of the interesting things we discovered.
</p>

<h2>Meeting a deadline</h2>

<p>
It shouldn’t be too surprising that the volume of donations went up as the July 4th deadline approached. By our count, over half of the donations were made in the last 48 hours of the campaign. We also saw some subtler changes in the final days:
</p>

<ul>
<li>Overall, a healthy 17% of donations came in via mobile devices. But on the last day of the campaign, mobile use <strong>doubled</strong>: 32% of donors donated from their phones or tablets instead of waiting to get to their laptops.</li>
<li>Repeat donations were <strong>three times as common</strong> in the final week. Between June 25th and July 4th, 14% of donations were from email addresses that had contributed at least once already. Although it’s true that repeat donations are more likely the longer a campaign goes on, it’s notable that in the previous week, repeat donations only made up 4% of the total—and only 1% the week before that.</li>
</ul>

<p>
Deadlines can be incredibly effective in fundraising: Mayday’s supporters were motivated to donate both immediately and repeatedly.
</p>

<h2>Checking out</h2>

<p>
Mayday’s donation page uses <a href="../../country?country=CH&amp;redirect=%252Fcheckout">Stripe Checkout</a> to collect payment information. Checkout optionally allows customers to store their payment info with Stripe, making future purchases easier. Since this works across <em>all</em> sites that use Checkout, Stripe already remembered the payment info for a portion of the people visiting Mayday for the first time. We were very curious to see how this would perform. Here’s what we found:
</p>

<ul>
<li>The overall conversion rate, once a visitor got to Checkout on Mayday for the first time, was 78%.</li>
<li>For users already logged in to a Stripe account, the rate shot up to <strong>90%</strong>.</li>
</ul>

<p>To put it another way, the chance that a visitor would abandon their donation at the Checkout step halved from 22% to 10%.

<p>
It’s worth repeating that these users weren’t on the Mayday site when they stored their details, and there’s no reason to expect they were any more likely to donate than anyone else—they just happened to have already used Stripe to buy something online in the past.
</p>

<p>
Even for repeat visitors to Mayday, who <em>are</em> more likely to donate than anyone else, having a Stripe account made a substantial difference. In general, visitors who had donated before had a healthy 87% conversion rate, but for those who were already logged in to Stripe, it was 94%.
</p>


<div class="image-center">
  <img data-hires="true" src="../../img/blog/posts/mayday/checkout.png" width="578">
</div>

<h2>Coming back for more</h2>

<p>Looking at repeat donations prompted us to ask: do people donate more or less their second time? On average, the answer is roughly 50% more. While first donations had a mean of $88 and a median of $30, repeat donations had a mean of $114 and a median of $50.
</p>

<p>Average doesn’t mean typical, however. If you look at each repeat donor one by one, it turns out they’re split almost exactly into thirds: 33% donate less the second time (most commonly half), 35% donate more (most commonly double), and 32% donate exactly the same. The averages get pushed up because doubling (and the occasional tripling or even quadrupling) makes a bigger difference overall than halving does.
</p>

<h2>Supporting your supporters</h2>

<p>
Supporting repeat donors was critical to the campaign’s success. When donors return to your site (probably at the last minute), make it easy for them: don’t make them find their laptop, and don’t make them enter their credit card again. Encourage them to increase their donation, but don’t expect it. When you make it easy enough, they’ll almost certainly help you out—94% of the time, anyway.
</p>

  </div>

  <footer>
    <p>
      November 4, 2014
    </p>
  </footer>
  
</article>
</div>


      <div id='blog-post--stripe-dublin-meetup'>
<article class=''>

  <header>
    <a class="picture" href="../../country?country=CH&amp;redirect=%252Fabout#cmairs">
      <img src="../../img/about/team/cmairs@2x.jpeg">
    </a>
    <h1><a href="../../country?country=CH&amp;redirect=%252Fblog%252Fstripe-dublin-meetup">Stripe Dublin Meetup<br /></a></h1>
    <p>
      <a class="author" href="../../country?country=CH&amp;redirect=%252Fabout#cmairs">Christina Mairs</a>
      <span>on</span> October 29, 2014
    </p>
  </header>
  
  <div class="content">
    

    <div class="map-image">
    <a href="http://maps.google.com/maps?q=18%20St%20Stephen's%20Green,%20Dublin,%20Ireland&hl=en&hnear=18%20St%20Stephen's%20Green,%20Dublin,%20Ireland&t=m&z=15" target="_blank">
        <img src="https://maps.googleapis.com/maps/api/staticmap?center=18%20St%20Stephen's%20Green,%20Dublin,%20Ireland&zoom=15&size=640x280&sensor=false&style=feature:administrative.land_parcel|element:geometry|visibility:off&style=feature:water|element:geometry.fill|color:0x52b6ef&style=feature:landscape|element:geometry|saturation:-100|lightness:50&style=feature:road|saturation:-100|lightness:50&style=feature:poi|element:geometry|saturation:-100|lightness:50&style=feature:poi|element:labels.text.fill|lightness:30&style=feature:road.arterial|element:labels.text.fill|lightness:-30&style=feature:road.highway|element:geometry.fill|color:0xf2be50&style=feature:road.highway|element:geometry.stroke|color:0xe0994c&style=feature:road.highway|element:labels.text.fill|color:0xb96f1e&style=feature:poi.park|element:geometry|color:0xcbd9b4&style=feature:transit|element:labels|lightness:20&style=feature:administrative|saturation:-100" width="640" height="280" />

        </a>

</div>


    <p>Come join us and our friends from <a href="https://intercom.io">Intercom</a> for a meetup in Dublin on Thursday night. A handful of Stripes will be around, and we’d love to see you all at Intercom’s new offices for a chat and a pint.</p>

    <div class="map-details">
      <dl>
        <dt>When:</dt>
        <dd>Thursday, November 6th, starting at 6:30 PM</dd>

        <dt>Where:</dt>
        <dd>Intercom (2nd Floor, <a href="http://goo.gl/tO7LFO">Stephen Court</a>)</dd>
      </dl>
    </div>

    <p>RSVP via our <a href="../../events/dublin-intercom-meetup">event page</a>.</p>



  </div>

  <footer>
    <p>
      October 29, 2014
    </p>
  </footer>
  
</article>
</div>


      <div id='blog-post--game-day-exercises-at-stripe'>
<article class=''>

  <header>
    <a class="picture" href="../../country?country=CH&amp;redirect=%252Fabout#marc">
      <img src="../../img/about/team/marc@2x.jpeg">
    </a>
    <h1><a href="../../country?country=CH&amp;redirect=%252Fblog%252Fgame-day-exercises-at-stripe">Game Day Exercises at Stripe: <br /> Learning from `kill -9`<br /></a></h1>
    <p>
      <a class="author" href="../../country?country=CH&amp;redirect=%252Fabout#marc">Marc Hedlund</a>
      <span>on</span> October 28, 2014
    </p>
  </header>
  
  <div class="content">
    <p id="src0"> We’ve started running game day exercises at Stripe. During a recent game day, we tested failing over a Redis cluster by running <code>kill -9</code> on its primary node <a href="../../country?country=CH&amp;redirect=%252Fblog%252Fpage%252F4#ref0">[0]</a>, and ended up losing all data in the cluster. We were very surprised by this, but grateful to have found the problem in testing. This result and others from this exercise convinced us that game days like these are quite valuable, and we would highly recommend them for others. </p>

<p id="src1"> If you’re not familiar with game days, the best introductory article is <a href="http://queue.acm.org/detail.cfm?id=2353017">this one</a> from John Allspaw <a href="../../country?country=CH&amp;redirect=%252Fblog%252Fpage%252F4#ref1">[1]</a>. Below, we’ll lay out a playbook for how to run a game day, and describe the results from our latest exercise to show why we believe they are valuable. </p>

<h2> How to run a game day exercise </h2>

<p> The system we recently tested, scoring-srv, is one part of our fraud detection system. The scoring-srv processes run on a cluster of boxes and connect to a three-node Redis cluster to store fraud scoring data. Our internal charge-processing code connects to scoring-srv for each charge made on Stripe’s network, so it needs to be very low-latency; likewise, accurate scoring requires historical data, so it needs durable storage. </p>

<p> The scoring-srv developers and a member of our systems team, who could help run the tests, got together around a whiteboard. We drew a basic block diagram of the machines and processes, the data stores, and the network connections between the components. With that diagram, we were able to come up with a list of possible failures. </p>

<p> We came up with a list of six tests we could run easily: </p>

<ul>
<li> destroying and restoring a scoring-srv box, </li>
<li> destroying progressively more scoring-srv boxes until calls to it began timing out, </li>
<li> partitioning the network between our charge processing code and scoring-srv, </li>
<li> increasing the load on the primary Redis node, </li>
<li> killing the primary Redis node, and </li>
<li> killing one of the Redis replicas. </li>
</ul>

<p id="src2"> Since the team was new to game days, we did not try to be comprehensive or clever. We instead chose the simplest, easiest to simulate failures we could think of. We’d take a blunt instrument, like <code>kill -9</code> or <code>aws ec2 terminate-instances</code>, give the system a good hard knock, and see how it reacted <a href="../../country?country=CH&amp;redirect=%252Fblog%252Fpage%252F4#ref2">[2]</a>. </p>

<p> For each test, we came up with one or more hypotheses for what would happen when we ran it. For instance, we guessed that partitioning the network between charge processing and scoring-srv would cause these calls to time out and fail open (that is, allow the charge to go through immediately). Then, we decided on an order to perform the tests, saved a backup of a recent Redis snapshot as a precaution, and dove in. </p>

<p> Here, then, is a quick-start checklist for running a game day: </p>

<ol class="checklist">
<li> Get the development team together with someone who can modify the network and destroy or provision servers, and block off an afternoon to run the exercise. </li>
<li> Make a simple block diagram of the machines, processes, and network connections in the system you’re testing. </li>
<li> Come up with 5-7 of the simplest failures you can easily induce in the system. </li>
<li> Write down one or more hypotheses for what will happen after each failure. </li>
<li> Back up any data you can’t lose. </li>
<li> Induce each failure and observe the results, filing bugs for each surprise you encounter. </li>
</ol>

<h2> Observations and results </h2>

<p> We were able to terminate a scoring-srv machine and restore it with a single command in roughly the estimated time. This gave us confidence that replacing or adding cluster machines would be fast and easy. We also saw that killing progressively more scoring-srv machines never caused timeouts, showing we currently have more capacity than necessary. Partitioning the network between the charge-processing code and scoring-srv caused a spike in latency, where we’d expected calls to scoring-srv to time out and fail open quickly. This test also should have immediately alerted the teams responsible for this system, but did not. </p>

<p> The first Redis test went pretty well. When we stopped one of the replicas with <code>kill -9</code>, it flapped several times on restart, which was surprising and confusing to observe. As expected, though, the replica successfully restored data from its snapshot and caught up with replication from the primary. </p>

<p> Then we moved to the Redis primary node test, and had a bigger surprise. While developing the system, we had become concerned about latency spikes during snapshotting of the primary node. Because scoring-srv is latency-sensitive, we had configured the primary node not to snapshot its data to disk. Instead, the two replicas each made frequent snapshots. In the case of failure of the primary, we expected one of the two replicas to be promoted to primary; when the failed process came back up, we expected it to restore its data via replication from the new primary. That didn’t happen. Instead, when we ran <code>kill -9</code> on the primary node (and it was restarted by daemontools), it came back up – after, again, flapping for a short time – with no data, but was still acting as primary. From there, it restarted replication and sent its empty dataset to the two replica nodes, which lost their datasets as a result. In a few seconds, we’d gone from a three-node replicated data store to an empty data set. Fortunately, we had saved a backup and were able to get the cluster re-populated quickly. </p>

<p> The full set of tests took about 3.5 hours to run. For each failure or surprise, we filed a bug describing the expected and actual results. We wound up with 15 total issues from the five tests we performed (we wound up skipping the Redis primary load test) – a good payoff for the afternoon’s work. Closing these, and re-running the game day to verify that we now know what to expect in these cases, will greatly increase our confidence in the system and its behavior. </p>

<h2> Learning from the game day </h2>

<p> The invalidation of our Redis hypothesis left us questioning our approach to data storage for scoring-srv. Our original Redis setup had all three nodes performing snapshots (that is, periodically saving data to disk). We had tested failover from the primary node due to a clean shutdown and it had succeeded. While analyzing the cluster once we had live data running through it, though, we observed that the low latency we’d wanted from it would hit significant spikes, above 1 second, during snapshotting: </p>

<div class="image-center">
<a href="../../img/blog/posts/game-day-exercises-at-stripe/enabled.png" class="zoom img" maxSize="777x282"><img width="550" src="../../img/blog/posts/game-day-exercises-at-stripe/enabled.png"></a>
</div>

<p> Obviously these spikes were concerning for a latency-sensitive application. We decided to disable snapshotting on the primary node, leaving it enabled on the replica nodes, and you can see the satisfying results below, with snapshotting enabled, then disabled, then enabled again: </p>

<div class="image-center">
<a href="../../img/blog/posts/game-day-exercises-at-stripe/disabled.png" class="zoom img" maxSize="777x282"><img width="550" src="../../img/blog/posts/game-day-exercises-at-stripe/disabled.png"></a>
</div>

<p> Since we believed that failover would not be compromised in this configuration, this seemed like a good trade-off: relying on the primary node for performance and replication, and the replica nodes for snapshotting, failover, and recovery. As it turned out, this change was made the day before the game day, as part of the final lead-up to production readiness. (One could imagine making a similar change in the run-up to a launch!) </p>

<p> The game day wound up being the first full test of the configuration including all optimizations and changes made during development. We had tested the system with a primary node shutdown, then with snapshotting turned off on the primary, but this was the first time we’d seen these conditions operating together. The value of testing on production systems, where you can observe failures under the conditions you intend to ship, should be clear from this result. </p>

<p> After discussing the results we observed with some friends, a long and heated discussion about the failure took place on Twitter, in which Redis’ author said he had not expected the configuration we were using. Since there is no guarantee the software you’re using supports or expects the way you’re using it, the only way to see for certain how it will react to a failure is to try it.  </p>

<p> While Redis is functional for scoring-srv with snapshotting turned on, the needs of our application are likely better served by other solutions. The trade-off between high-latency spikes, with primary node snapshotting enabled, versus total cluster data loss, with it disabled, leaves us feeling neither option is workable. For other configurations at Stripe – especially single-node topologies for which data loss is less costly, such as rate-limiting counters – Redis remains a good fit for our needs. </p>

<h2> Conclusions </h2>

<p> In the wake of the game day, we’ve run a simple experiment with PostgreSQL RDS as a possible replacement for the Redis cluster in scoring-srv. The results suggest that we could expect comparable latency without suffering snapshotting spikes. Our testing, using a similar dataset, had a 99th percentile read latency of 3.2 milliseconds, and a 99th percentile write latency of 11.3 milliseconds. We’re encouraged by these results and will be continuing our experiments with PostgreSQL for this application (and obviously, we will run similar game day tests for all systems we consider).  </p>

<p> Any software will fail in unexpected ways unless you first watch it fail for yourself. We completely agree with Kelly Sommers’ point in the Twitter thread about this: </p>

<blockquote class="twitter-tweet" align="center" lang="en"><p>If there&#39;s anything to learn from this Redis problem, even a simple kill -9 test needs to happen more often in our industry.</p>&mdash; Kelly Sommers (@kellabyte) <a href="https://twitter.com/kellabyte/status/524969416606633984">October 22, 2014</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p> We’d highly recommend game day exercises to any team deploying a complex web application. Whether your hypotheses are proven out or invalidated, either way you’ll leave the exercise with greater confidence in your ability to respond to failures, and less need for on-the-fly diagnosis. Having that happen for the first time while you’re rested, ready, and watching is the best failure you can hope for. </p>

<h2> Notes </h2>

<p id="ref0"> <a href="../../country?country=CH&amp;redirect=%252Fblog%252Fpage%252F4#src0">[0]</a> We’ve chosen to use the terms “primary” and “replica” in discussing Redis, rather than the terms “master” and “slave” used in the Redis documentation, to support inclusivity. For some interesting and heated discussion of this substitution, we’d recommend this <a href="https://github.com/django/django/pull/2692">Django pull request</a> and this <a href="https://www.drupal.org/node/2275877">Drupal change</a>. </p>

<p id="ref1"> <a href="../../country?country=CH&amp;redirect=%252Fblog%252Fpage%252F4#src1">[1]</a> Some other good background articles for further reading: “<a href="http://queue.acm.org/detail.cfm?id=2371516">Weathering the Unexpected</a>”; “<a href="http://queue.acm.org/detail.cfm?id=2371297">Resilience Engineering: Learning to Embrace Failure</a>”; “<a href="http://www.kitchensoap.com/2011/05/10/training-organizational-resilience-in-escalating-situations/">Training Organizational Resilience in Escalating Situations</a>”; “<a href="http://www.theatlantic.com/technology/archive/2012/11/when-the-nerds-go-marching-in/265325/">When the Nerds Go Marching In</a>.”</p>

<p id="ref2"> <a href="../../country?country=CH&amp;redirect=%252Fblog%252Fpage%252F4#src2">[2]</a> If you’d like to run more involved tests and you’re on AWS, this <a href="http://techblog.netflix.com/2014/10/fit-failure-injection-testing.html">Netflix Tech Blog post</a> from last week describes the tools they use for similar testing approaches. </p>

<h2> Thanks </h2>

<p> Thanks much to <a href="https://twitter.com/allspaw">John Allspaw</a>, <a href="https://twitter.com/jmhodges">Jeff Hodges</a>, <a href="https://twitter.com/aphyr">Kyle Kingsbury</a>, and <a href="https://twitter.com/raffi">Raffi Krikorian</a> for reading drafts of this post, and to <a href="https://twitter.com/kellabyte">Kelly Sommers</a> for permission to quote her tweet. Any errors are ours alone. </p>

  </div>

  <footer>
    <p>
      October 28, 2014
    </p>
  </footer>
  
</article>
</div>


      <div id='blog-post--apple-pay'>
<article class=''>

  <header>
    <a class="picture" href="../../country?country=CH&amp;redirect=%252Fabout#ray">
      <img src="../../img/about/team/ray@2x.jpeg">
    </a>
    <h1><a href="../../country?country=CH&amp;redirect=%252Fblog%252Fapple-pay">Apple Pay<br /></a></h1>
    <p>
      <a class="author" href="../../country?country=CH&amp;redirect=%252Fabout#ray">Ray Morgan</a>
      <span>on</span> October 20, 2014
    </p>
  </header>
  
  <div class="content">
     <div style='min-height:524px'>

  <img src='../../img/apple-pay/phone.png' width='252' height='514' data-hires='true' id='applepay-phone' />

  <p>
    Starting today, any Stripe user can begin accepting <a href="http://apple.com/apple-pay">Apple Pay</a> in their iOS apps. Apple Pay lets your customers frictionlessly pay with one touch using a stored credit card. We think Apple Pay will make starting a mobile business easier than ever.
  </p>

  <p>
    Apple Pay doesn’t replace In-App Purchases. You should use Apple Pay when charging for physical goods (such as groceries, clothing, and appliances) or for services (such as club memberships, hotel reservations, and tickets for events). You should continue to use In-App Purchases to charge for virtual goods such as premium content in your app.
  </p>

  <p>
    When your customer is ready to pay, they’ll authorize a payment using <a href="http://www.apple.com/iphone-6/touch-id/">Touch ID</a>. Then, Stripe generates a card token, which you can use to create charges as you normally would through the Stripe API. It just takes a few lines of code to set up and display the Apple Pay UI:
  </p>

</div>

<div style='clear:both;height:1px'></div>

  <pre class='obj-c'><code>- (<span class='meta'>void</span>)<span class='keyword'>paymentAuthorizationViewController:</span>(<span class='meta'>PKPaymentAuthorizationViewController</span> *)controller
    <span class='keyword'>                   didAuthorizePayment:</span>(<span class='meta'>PKPayment</span> *)payment
    <span class='keyword'>                            completion:</span>(<span class='meta'>void</span> (^)(<span class='meta'>PKPaymentAuthorizationStatus</span>))completion {

    [<span class='meta'>Stripe</span> <span class='keyword'>createTokenWithPayment:</span>payment
                        <span class='keyword'>completion:</span>^(<span class='meta'>STPToken</span> *token, <span class='meta'>NSError</span> *error) {
        <span class='comment'>// charge your Stripe token as normal</span>
    }];
}</code></pre>

  <p>
    The following Stripe-powered apps already have Apple Pay enabled. You can try it out as soon as their updates hit the App Store. We owe them special thanks for all their feedback and bugsquashing over the past few weeks.
  </p>

  <ul id='applepay-apps-list'>
    <li><a href='https://www.instacart.com'><img src='../../img/apple-pay/apps/instacart.png' width='76' height='76' data-hires='true' /></a></li>
    <li><a href='https://www.lyft.com'><img src='../../img/apple-pay/apps/lyft.png' width='76' height='76' data-hires='true' /></a></li>
    <li><a href='https://www.shopspring.com'><img src='../../img/apple-pay/apps/spring.png' width='76' height='76' data-hires='true' /></a></li>
    <li><a href='https://www.fancy.com'><img src='../../img/apple-pay/apps/fancy.png' width='76' height='76' data-hires='true' /></a></li>
    <li><a href='https://www.chairish.com'><img src='../../img/apple-pay/apps/chairish.png' width='76' height='76' data-hires='true' /></a></li>

    <li><a href='https://www.wish.com'><img src='../../img/apple-pay/apps/wish.png' width='76' height='76' data-hires='true' /></a></li>
    <li><a href='https://www.threadflip.com'><img src='../../img/apple-pay/apps/threadflip.png' width='76' height='76' data-hires='true' /></a></li>
    <li><a href='https://www.dealflicks.com'><img src='../../img/apple-pay/apps/dealflicks.png' width='76' height='76' data-hires='true' /></a></li>
    <li><a href='https://www.lifx.com'><img src='../../img/apple-pay/apps/lifx.png' width='76' height='76' data-hires='true' /></a></li>
    <li><a href='https://www.postmates.com'><img src='../../img/apple-pay/apps/postmates.png' width='76' height='76' data-hires='true' /></a></li>

    <li><a href='https://www.11main.com'><img src='../../img/apple-pay/apps/11main.png' width='76' height='76' data-hires='true' /></a></li>
    <li><a href='https://www.getaround.com'><img src='../../img/apple-pay/apps/getaround.png' width='76' height='76' data-hires='true' /></a></li>
    <li><a href='https://www.indiegogo.com'><img src='../../img/apple-pay/apps/indiegogo.png' width='76' height='76' data-hires='true' /></a></li>
    <li><a href='http://www.sosh.com'><img src='../../img/apple-pay/apps/sosh.png' width='76' height='76' data-hires='true' /></a></li>
    <li><a href='https://www.getwashio.com'><img src='../../img/apple-pay/apps/washio.png' width='76' height='76' data-hires='true' /></a></li>
  </ul>

  <p>
    If you’ve got any questions, or need help getting started, please <a href="mailto:apple-pay@stripe.com">get in touch</a>.
  </p>

  <p class="cta">
    Get started with Apple Pay <a href="../../country?country=CH&amp;redirect=%252Fdocs%252Fmobile%252Fios" class="button">View documentation</a>
  </p>

  </div>

  <footer>
    <p>
      October 20, 2014
    </p>
  </footer>
  
</article>
</div>


      <div id='blog-post--open-source-retreat-meetup'>
<article class=''>

  <header>
    <a class="picture" href="../../country?country=CH&amp;redirect=%252Fabout#gdb">
      <img src="../../img/about/team/gdb@2x.jpeg">
    </a>
    <h1><a href="../../country?country=CH&amp;redirect=%252Fblog%252Fopen-source-retreat-meetup">Open-Source Retreat meetup<br /></a></h1>
    <p>
      <a class="author" href="../../country?country=CH&amp;redirect=%252Fabout#gdb">Greg Brockman</a>
      <span>on</span> October 16, 2014
    </p>
  </header>
  
  <div class="content">
    <p>A few months ago, we announced our <a href="../../country?country=CH&amp;redirect=%252Fblog%252Fstripe-open-source-retreat">Open-Source Retreat</a>. Though we’d originally expected to sponsor two grantees, we ended up giving out three full grants (and then an additional shorter grant). </p>

<p> Here’s what happened with those grants: </p>

<ul>
  <li><a href="https://twitter.com/Shapiro">Julian Shapiro</a> launched 1.0s of <a href="http://julian.com/research/velocity/">Velocity.js</a> (an animation engine focused on performance) and <a href="http://julian.com/research/blast/">Blast</a> (a library that makes text manipulable).</li>
  <li><a href="https://twitter.com/_ashfall_">Ashwini Oruganti</a> will soon be releasing a pure-Python <a href="https://github.com/pyca/tls">TLS 1.2 implementation</a>.</li>
  <li><a href="https://twitter.com/segiddins">Samuel Giddins</a> pushed out <a href="https://github.com/CocoaPods/CocoaPods/blob/master/CHANGELOG.md">two major releases</a> for CocoaPods and the <a href="https://github.com/CocoaPods/Molinillo">Molinillo</a> dependency resolution gem.</li>
  <li>For his two-week grant, <a href="https://twitter.com/shazow">Andrey Petrov</a> shipped a major <a href="https://pypi.python.org/pypi/urllib3#changes">urllib3 release</a>, including upgraded security defaults and finer-grained retry configuration.</li>
</ul>

<hr>

<p>If you’d like more details, we’ll be hosting a meetup at Stripe on Tuesday, October 21st. The grantees will talk about their projects and where they plan to go next. RSVP on our <a href="../../events/oss-meetup-october-2014">event page</a> if you’d like to attend in person, or view our <a href="../../video/open-source-retreat">livestream</a>. </p>

<hr> 

<p>If you have any questions about the retreat, the projects, or anything else, please <a href="mailto:open-source-retreat@stripe.com">get in touch</a>!</p>

  </div>

  <footer>
    <p>
      October 16, 2014
    </p>
  </footer>
  
</article>
</div>


      <div id='blog-post--poodle'>
<article class=''>

  <header>
    <a class="picture" href="../../country?country=CH&amp;redirect=%252Fabout#woodrow">
      <img src="../../img/about/team/woodrow@2x.jpeg">
    </a>
    <h1><a href="../../country?country=CH&amp;redirect=%252Fblog%252Fpoodle">Poodle<br /></a></h1>
    <p>
      <a class="author" href="../../country?country=CH&amp;redirect=%252Fabout#woodrow">Steve Woodrow</a>
      <span>on</span> October 15, 2014
    </p>
  </header>
  
  <div class="content">
    <p>As you’ve likely seen, a design flaw in SSL 3.0 was announced to the internet yesterday, nicknamed <a href="https://www.imperialviolet.org/2014/10/14/poodle.html">POODLE</a>. Unfortunately, it’s not just an implementation flaw—the only way to disable the attack is to turn off the affected ciphers altogether. Fortunately, the only common browser which still relies on SSL 3.0 is Internet Explorer 6 on Windows XP, which is a <a href="https://blog.cloudflare.com/sslv3-support-disabled-by-default-due-to-vulnerability/">small fraction</a> of internet traffic.</p>

<p>We’ve <a href="https://twitter.com/stripestatus/status/522186062236377089">deployed</a> changes to ensure Stripe traffic remains secure.</p>

<h2>Our response</h2>

<p>We’ve taken an approach similar to <a href="http://googleonlinesecurity.blogspot.com/2014/10/this-poodle-bites-exploiting-ssl-30.html">Google’s</a>: We’ve disabled the now easily-exploited CBC-mode SSL 3.0 ciphers. We’ve also deployed OpenSSL with support for <a href="https://tools.ietf.org/html/draft-ietf-tls-downgrade-scsv-00">TLS_FALLBACK_SCSV</a>, which prevents newer browsers from being tricked into using SSL 3.0 at all. This means that IE6 customers will (for now) continue to be able to purchase from Stripe users, and there will be no immediate user-facing impact.</p>

<h2>Ending support for SSL 3.0</h2>

<p>While there do exist some mitigations, there is no configuration under which SSL 3.0 is totally secure. As well, with so many websites responding to POODLE by dropping SSL 3.0 support entirely, we expect that IE6 on XP will soon stop working on most of the web.</p>

<p>Our plan going forward:</p>

<ul>
  <li>Starting today, new Stripe users will not be able to send API requests or receive webhooks using SSL 3.0.</li>
  <li>On November 15, 2014, we will drop SSL 3.0 support entirely (including for <a href="../../country?country=CH&amp;redirect=%252Fdocs%252Fstripe.js">Stripe.js</a> and <a href="../../country?country=CH&amp;redirect=%252Fcheckout">Checkout</a>).</li>
</ul>

<p>In the meantime, we’ll notify any of our users who we expect to be affected by this change. If you have any questions, please don’t hesitate to <a href="mailto:steve.woodrow@stripe.com">get in touch</a>.</p>

  </div>

  <footer>
    <p>
      October 15, 2014
    </p>
  </footer>
  
</article>
</div>


      <div id='blog-post--pagerbot'>
<article class=''>

  <header>
    <a class="picture" href="../../country?country=CH&amp;redirect=%252Fabout#karl">
      <img src="../../img/about/team/karl@2x.jpeg">
    </a>
    <h1><a href="../../country?country=CH&amp;redirect=%252Fblog%252Fpagerbot">Pagerbot<br /></a></h1>
    <p>
      <a class="author" href="../../country?country=CH&amp;redirect=%252Fabout#karl">Karl-Aksel Puulmann</a>
      <span>on</span> September 26, 2014
    </p>
  </header>
  
  <div class="content">
      <p>
    We’re open-sourcing <a href="https://github.com/stripe/pagerbot">Pagerbot</a>, a tool we developed to make it easy to interact with PagerDuty through your internal chat system. (At the very least, we hope it'll help other companies respond to incidents like <a href="https://news.ycombinator.com/item?id=8364746">Shellshock</a> or the ongoing <a href="https://news.ycombinator.com/item?id=8364643">AWS reboot</a> cycle.)
  </p>

  <h2> Background </h2>

  <p>
    Like many tech companies, Stripe uses <a href="https://www.pagerduty.com/">PagerDuty</a> to help coordinate on-call schedules and incident response. The service is super reliable, does a great job of handling our normal rotations, and we appreciate being able to individually set preferences for how we want to get notified.
  </p>

  <p>
    Fairly frequently, though, people will trade on-call shifts, whether because of travel, vacation, or even just making sure someone is keeping an eye on things while they’re out watching a movie.
    The communication about the trades mainly happens in one of our <a href="https://slack.com/">Slack</a> channels.
  </p>

  <p>
    Inspired by GitHub’s idea of <a href="https://speakerdeck.com/jnewland/chatops-at-github">chat-driven ops</a>, we wanted PagerDuty schedule changes to happen in the same place as the rest of our communication.
  </p>

  <div class="image-center">
    <img width="578" height="322" data-hires="true" src="../../img/blog/posts/pagerbot/schedule_takeover.png">
  </div>

  <p>
    We’ve tried to make Pagerbot easily handle our previous scheduling woes. For instance, with Stripes scattered all around the world, juggling timezones is very confusing, but if you don’t specify a timezone in your queries, Pagerbot automatically uses the timezone you configured in your PagerDuty profile.
  </p>

  <p>
    Over time, we’ve added more commands to Pagerbot. For instance, based on Heroku’s <a href="https://blog.heroku.com/archives/2014/5/9/incident-response-at-heroku">incident response blog post</a>, we added support for explicitly paging an individual:
  </p>

  <div class="image-center">
    <img width="578" height="173" data-hires="true" src="../../img/blog/posts/pagerbot/extra_commands.png">
  </div>

  <h2>Deploying to Heroku</h2>

  <p>
    Pagerbot supports both Slack and IRC and although you can always run Pagerbot on your own infrastructure, we’ve also made Pagerbot compatible with the new <a href="https://blog.heroku.com/archives/2014/8/7/heroku-button">Heroku Button</a>:
  </p>

  <p class="cta">
    <a href="https://heroku.com/deploy?template=https://github.com/stripe/pagerbot"><img src="https://camo.githubusercontent.com/c0824806f5221ebb7d25e559568582dd39dd1170/68747470733a2f2f7777772e6865726f6b7563646e2e636f6d2f6465706c6f792f627574746f6e2e706e67" alt="Deploy" data-canonical-src="https://www.herokucdn.com/deploy/button.png" style="max-width:100%;"></a>
  </p>

  <p>
    (Note: Heroku requires you to
    <a href="https://devcenter.heroku.com/articles/account-verification#verification-requirement">provide a credit card</a>
    to enable the Heroku MongoDB addon, though you won’t actually be charged anything).
  </p>

  <p>
    Once you’ve deployed Pagerbot to Heroku, there’s a built-in admin panel you can use to get things set up. You’ll need to tell Pagerbot about your PagerDuty subdomain, your chat credentials, and any aliases you want for either people or schedules.
  </p>

  <p>
    We’ve also tried to make it easy to add new commands to Pagerbot by building a simple plugin architecture. Feel free to fork Pagerbot and add your own plugins.
  </p>

  <hr />

  <p>
    We’ve been using Pagerbot as our main interface to PagerDuty for over two years now. If you use PagerDuty and either Slack or IRC, we hope you’ll find it useful — <a href="https://github.com/stripe/pagerbot">check it out</a>, and <a href="mailto:karl@stripe.com">let us know</a> what you think!
  </p>

  </div>

  <footer>
    <p>
      September 26, 2014
    </p>
  </footer>
  
</article>
</div>


      <div id='blog-post--official-go-support'>
<article class=''>

  <header>
    <a class="picture" href="../../country?country=CH&amp;redirect=%252Fabout#cos">
      <img src="../../img/about/team/cos@2x.jpeg">
    </a>
    <h1><a href="../../country?country=CH&amp;redirect=%252Fblog%252Fofficial-go-support">Official Go support<br /></a></h1>
    <p>
      <a class="author" href="../../country?country=CH&amp;redirect=%252Fabout#cos">Cosmin Nicolaescu</a>
      <span>on</span> September 23, 2014
    </p>
  </header>
  
  <div class="content">
    <p>We’re fans of Go (both the <a href="http://golang.org/">language</a> and the
<a href="https://twitter.com/marcprecipice/status/449690138180718592">game</a>) here at Stripe, and
it seems we’re not the only ones. In recent months, we’ve seen Go’s popularity
rise amongst our users and more generally in the open-source community, so we
decided to add an official <a href="https://github.com/stripe/stripe-go/">Stripe library for Go</a>.
</p>

<div class="image-center">
  <img width="578" height="383" data-hires="true" src="../../img/blog/posts/official-go-support/chart.png">
  <p>Requests made to Stripe using Go in 2014</p>
</div>

<p>We’ve also started using more Go at Stripe internally. For example, parts of
the system that power <a href="../../country?country=CH&amp;redirect=%252Fcheckout">Checkout</a> are built in Go (and use
this library). When porting some existing services to Go, we’ve noticed 2-4x
increases in throughput (and our engineers were pretty happy with the
development process).
</p>

<p>To get started with our Go library, <code>go get github.com/stripe/stripe-go</code> and then import it in your code. Here’s how you’d create a charge:</p>

<pre><code><span class="meta">import</span> (
  <span class="string">"</span><span class="kwd">github.com/stripe/stripe-go</span><span class="string">"</span>
  <span class="string">"</span><span class="kwd">github.com/stripe/stripe-go/currency</span><span class="string">"</span>
)

params := &stripe.ChargeParams {
    Amount:   1000,
    Currency: currency.USD,
    Card:     &stripe.CardParams{Token:<span class="string">"</span><span class="kwd">tok_14dlcYGBoqcjK6A1Th7tPXfJ</span><span class="string">"</span>},
    Desc:     <span class="string">"</span><span class="kwd">Gopher t-shirt</span><span class="string">",</span>
}
</code></pre>

<p>There are two ways to make calls with the library, based on your needs. The simplest way is to use the global implicit client and invoke the APIs:</p>

<pre><code><span class="meta">import</span> (
  <span class="string">"</span><span class="kwd">github.com/stripe/stripe-go/charge</span><span class="string">"</span>
)

stripe.Key = <span class="string">"</span><span class="kwd">tGN0bIwXnHdwOa85VABjPdSn8nWY7G7I</span><span class="string">"</span>
ch, err := charge.New(params)
</code></pre>

<p>If your scenario involves concurrent calls or you’re dealing with multiple API keys, you can use an explicit client:</p>

<pre><code><span class="meta">import</span> (
  <span class="string">"</span><span class="kwd">github.com/stripe/stripe-go/client</span><span class="string">"</span>
)

sc := &client.Api{}
sc.Init(<span class="string">"</span><span class="kwd">tGN0bIwXnHdwOa85VABjPdSn8nWY7G7I</span><span class="string">"</span>, nil)

ch, err := sc.Charges.New(params)
</code></pre>

<p>Given Go’s lack of built-in versioning, we highly recommend you use a
<a href="https://code.google.com/p/go-wiki/wiki/PackageManagementTools">package management tool</a> to avoid any unforeseen upgrades.
</p>

<p>The library features <a href="http://godoc.org/github.com/stripe/stripe-go#example-Plan--List">iterator-based listing</a>,
which handles <a href="../../docs/api/go#pagination">pagination</a> for you automatically.
We’ve also added support for injecting mocks to make testing easier.
And if you need more control, the library allows you to inject your own<code>httpClient</code> for transport-level customizations.
</p>

<p>Check out the <a href="../../docs/api/go">docs</a> (or the <a href="http://godoc.org/github.com/stripe/stripe-go">GoDoc</a>)
for more details and examples. <a href="mailto:cosmin@stripe.com">Let me know</a> if you have any feedback,
or <a href="https://github.com/stripe/stripe-go/blob/master/README.md#development">send a pull request</a> my way!
</p>

  </div>

  <footer>
    <p>
      September 23, 2014
    </p>
  </footer>
  
</article>
</div>


      <div id='blog-post--events-in-canada'>
<article class=''>

  <header>
    <a class="picture" href="../../country?country=CH&amp;redirect=%252Fabout#kat">
      <img src="../../img/about/team/kat@2x.jpeg">
    </a>
    <h1><a href="../../country?country=CH&amp;redirect=%252Fblog%252Fevents-in-canada">Events in Canada<br /></a></h1>
    <p>
      <a class="author" href="../../country?country=CH&amp;redirect=%252Fabout#kat">Kat Li</a>
      <span>on</span> August 18, 2014
    </p>
  </header>
  
  <div class="content">
      <p>
    We have a few events in Canada in the upcoming months—hope you can join us!
  </p>

  <hr />
  
  <div class="multiple-events">

  <section class='event'>
    <aside>
      <time>Aug <span>27</span></time>
      <a href='../../events/montreal-oh-august-2014'>RSVP</a>
    </aside>
    <div>
      <h2><a href='../../events/montreal-oh-august-2014'>Montreal Office Hours</a></h2>
      <p>
        If you have questions about how to integrate Stripe or are looking tips for best practices, <a href='../../events/montreal-oh-august-2014'>sign up for a slot</a> during our office hours to get help from Stripe engineers and the growth team.<br />
        (We’ll be available from 9:30AM to 12:30PM.)
      </p>
    </div>
  </section>

  <section class='event'>
    <aside>
      <time>Aug <span>28</span></time>
      <a href='../../events/lightning-poutine-august-2014'>RSVP</a>
    </aside>
    <div>
      <h2><a href='../../events/lightning-poutine-august-2014'>Montreal lightning talks &amp; poutine</a></h2>
      <p>
        Five Stripe engineers will give short talks about various projects they’re working on, from machine learning to open source projects and more. Come hang out with us and enjoy some poutine.
      </p>
    </div>
  </section>

  <hr />

  <section class='event'>
    <aside>
      <time>Sep <span>6</span></time>
      <a href='../../events/vancouver-meetup-september-2014'>RSVP</a>
    </aside>
    <div>
      <h2><a href='../../events/vancouver-meetup-september-2014'>Vancouver Meetup</a></h2>
      <p>
        Join us for drinks and light refreshments to meet our team, other Stripe users, hear about upcoming features, and to give us feedback.
      </p>
    </div>
  </section>

  <section class='event'>
    <aside>
      <time>Sep <span>7</span></time>
      <a href='../../events/vancouver-oh-september-2014'>RSVP</a>
    </aside>
    <div>
      <h2><a href='../../events/vancouver-oh-september-2014'>Vancouver Office Hours</a></h2>
      <p>
        Interested in learning about our upcoming features or have questions about how to get started with Stripe? We’ll be hosting Office Hours to answer all of your questions.
      </p>
    </div>
  </section>

  <hr />

  <section class='event'>
    <aside>
      <time>Oct <span>1</span></time>
      <a href='http://www.ceca.uwaterloo.ca/students/hiresessions_details.php?id=2534'>Details</a>
    </aside>
    <div>
      <h2><a href='http://www.ceca.uwaterloo.ca/students/hiresessions_details.php?id=2534'>Info session at University of Waterloo</a></h2>
      <p>
        Curious about what it’s like to build and a scale a company that processes billions of dollars every year? Join us for dinner as we talk about engineering in the real world, with real world constraints.
      </p>
    </div>
  </section>

  <hr />

  <section class='event'>
    <aside>
      <time>Oct <span>2</span></time>
      <a href='../../events/toronto-meetup-october-2014'>RSVP</a>
    </aside>
    <div>
      <h2><a href='../../events/toronto-meetup-october-2014'>Toronto Meetup</a></h2>
      <p>
        We’re holding a get-together for Stripe users and friends over wine and beer. We’d love to meet you and hear about your experience using Stripe so far.
      </p>
    </div>
  </section>

  <hr />

  <p><a href='mailto:kat.li@stripe.com'>Send me a note</a> if you have questions about Stripe in Canada. We’re looking forward to seeing you!</p>
  </div>

  </div>

  <footer>
    <p>
      August 18, 2014
    </p>
  </footer>
  
</article>
</div>


      <div id='blog-post--improved-email-receipts'>
<article class=''>

  <header>
    <a class="picture" href="../../country?country=CH&amp;redirect=%252Fabout#wangjohn">
      <img src="../../img/about/team/wangjohn@2x.jpeg">
    </a>
    <h1><a href="../../country?country=CH&amp;redirect=%252Fblog%252Fimproved-email-receipts">Improved email receipts<br /></a></h1>
    <p>
      <a class="author" href="../../country?country=CH&amp;redirect=%252Fabout#wangjohn">John Wang</a>
      <span>on</span> August 6, 2014
    </p>
  </header>
  
  <div class="content">
    <p>
  We’re excited to share a couple of improvements to our email receipts! We’ve learned a lot since <a href="../../country?country=CH&amp;redirect=%252Fblog%252Femail-receipts">launching the feature</a> over a year ago.
</p>

<p class="image-center">
  <img width="562" height="422" data-hires="true" src="../../img/blog/posts/receipts/feedly_humble.png">
</p>

<div class="feature-list">

  <h3><strong class="update"><span>Update</span></strong>A new, customizable design</h3>
  <p>
    We’ve refreshed the design of email receipts. You can now customize your receipts by specifying your own header color. The default header color will still be selected based on the colors in the logo you upload. You can <a href="https://dashboard.stripe.com/account/emails">try it out</a> on the dashboard.
  </p>

  <h3><strong class="update"><span>Update</span></strong>A receipt for every charge</h3>
  <p>
    You can now use the <code>receipt_email</code> parameter when <a href="../../docs/api/index.html#create_charge">creating a charge</a> to send a receipt for that charge. Previously we only supported sending receipts to charges that belong to customers you saved on Stripe.
  </p>

  <h3><strong class="new"><span>New</span></strong>A receipt for every refund</h3>
  <p>
    Receipts are now available for all refunds. You can enable automatic refund receipts for your saved customers in your <a href="https://dashboard.stripe.com/account/emails">email settings</a>.
  </p>

  <h3><strong class="new"><span>New</span></strong>Resend receipts</h3>
  <p>
    Receipts can now be sent (and resent) from the dashboard even after a transaction occurs. You can also see the history of receipts you’ve sent on the dashboard.
  </p>

  <h3><strong class="new"><span>New</span></strong>Receipt numbers</h3>
  <p>
    You can easily find a customer's payment by searching for a receipt's unique, human-readable <code>receipt_number</code> in your dashboard.
  </p>

</div>

<p>
  As before, our receipts work across all popular mail clients. (Yes, they even look fine on Lotus Notes 8.) We’re always looking to make receipts more useful for you—do <a href="mailto:john.wang@stripe.com">let us know</a> if you have any feedback.
</p>

  </div>

  <footer>
    <p>
      August 6, 2014
    </p>
  </footer>
  
</article>
</div>



    <footer id="blog-footer">
    <nav>

      <a href="../../country?country=CH&amp;redirect=%252Fblog%252Fpage%252F5" class="older-posts">Older posts<!--Page 5--></a>

      <a href="../../country?country=CH&amp;redirect=%252Fblog%252Fpage%252F3" class="newer-posts">Newer posts<!-- Page 3--></a>

    </nav>
  </footer>



        <footer id="main-footer" class="">
  <div class='inner-col'>
    <p>&copy; Stripe</p>

      <div class="country-selector">
          <a class="select">
              <span>
                  <img width="23" height="17" alt="Switzerland" src="../../img/flags/ch.png" data-hires="true" />
                  <strong>Switzerland</strong>
              </span>
          </a>

          <ul>
              <li >
                <a href="../../country?country=AU&amp;redirect=%252Fblog%252Fpage%252F4" >
                  <img width="23" height="17" alt="Australia" src="../../img/flags/au.png" data-hires="true" />
                  <span>Australia</span>
                </a>
              </li>
              <li >
                <a href="../../country?country=CA&amp;redirect=%252Fblog%252Fpage%252F4" >
                  <img width="23" height="17" alt="Canada" src="../../img/flags/ca.png" data-hires="true" />
                  <span>Canada</span>
                </a>
              </li>
              <li >
                <a href="../../country?country=DK&amp;redirect=%252Fblog%252Fpage%252F4" >
                  <img width="23" height="17" alt="Denmark" src="../../img/flags/dk.png" data-hires="true" />
                  <span>Denmark</span>
                </a>
              </li>
              <li >
                <a href="../../country?country=FI&amp;redirect=%252Fblog%252Fpage%252F4" >
                  <img width="23" height="17" alt="Finland" src="../../img/flags/fi.png" data-hires="true" />
                  <span>Finland</span>
                </a>
              </li>
              <li >
                <a href="../../country?country=GB&amp;redirect=%252Fblog%252Fpage%252F4" >
                  <img width="23" height="17" alt="United Kingdom" src="../../img/flags/gb.png" data-hires="true" />
                  <span>United Kingdom</span>
                </a>
              </li>
              <li >
                <a href="../../country?country=IE&amp;redirect=%252Fblog%252Fpage%252F4" >
                  <img width="23" height="17" alt="Ireland" src="../../img/flags/ie.png" data-hires="true" />
                  <span>Ireland</span>
                </a>
              </li>
              <li >
                <a href="../../country?country=NO&amp;redirect=%252Fblog%252Fpage%252F4" >
                  <img width="23" height="17" alt="Norway" src="../../img/flags/no.png" data-hires="true" />
                  <span>Norway</span>
                </a>
              </li>
              <li >
                <a href="../../country?country=SE&amp;redirect=%252Fblog%252Fpage%252F4" >
                  <img width="23" height="17" alt="Sweden" src="../../img/flags/se.png" data-hires="true" />
                  <span>Sweden</span>
                </a>
              </li>
              <li >
                <a href="../../country?country=US&amp;redirect=%252Fblog%252Fpage%252F4" >
                  <img width="23" height="17" alt="United States" src="../../img/flags/us.png" data-hires="true" />
                  <span>United States</span>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=AT&amp;redirect=%252Fblog%252Fpage%252F4" >
                  <img width="23" height="17" alt="Austria" src="../../img/flags/at.png" data-hires="true" />
                  <span>Austria</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=BE&amp;redirect=%252Fblog%252Fpage%252F4" >
                  <img width="23" height="17" alt="Belgium" src="../../img/flags/be.png" data-hires="true" />
                  <span>Belgium</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=BR&amp;redirect=%252Fblog%252Fpage%252F4" >
                  <img width="23" height="17" alt="Brazil" src="../../img/flags/br.png" data-hires="true" />
                  <span>Brazil</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=FR&amp;redirect=%252Fblog%252Fpage%252F4" >
                  <img width="23" height="17" alt="France" src="../../img/flags/fr.png" data-hires="true" />
                  <span>France</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=DE&amp;redirect=%252Fblog%252Fpage%252F4" >
                  <img width="23" height="17" alt="Germany" src="../../img/flags/de.png" data-hires="true" />
                  <span>Germany</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=IT&amp;redirect=%252Fblog%252Fpage%252F4" >
                  <img width="23" height="17" alt="Italy" src="../../img/flags/it.png" data-hires="true" />
                  <span>Italy</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=JP&amp;redirect=%252Fblog%252Fpage%252F4" >
                  <img width="23" height="17" alt="Japan" src="../../img/flags/jp.png" data-hires="true" />
                  <span>Japan</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=LU&amp;redirect=%252Fblog%252Fpage%252F4" >
                  <img width="23" height="17" alt="Luxembourg" src="../../img/flags/lu.png" data-hires="true" />
                  <span>Luxembourg</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=MX&amp;redirect=%252Fblog%252Fpage%252F4" >
                  <img width="23" height="17" alt="Mexico" src="../../img/flags/mx.png" data-hires="true" />
                  <span>Mexico</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=NL&amp;redirect=%252Fblog%252Fpage%252F4" >
                  <img width="23" height="17" alt="Netherlands" src="../../img/flags/nl.png" data-hires="true" />
                  <span>Netherlands</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=PT&amp;redirect=%252Fblog%252Fpage%252F4" >
                  <img width="23" height="17" alt="Portugal" src="../../img/flags/pt.png" data-hires="true" />
                  <span>Portugal</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=SG&amp;redirect=%252Fblog%252Fpage%252F4" >
                  <img width="23" height="17" alt="Singapore" src="../../img/flags/sg.png" data-hires="true" />
                  <span>Singapore</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=ES&amp;redirect=%252Fblog%252Fpage%252F4" >
                  <img width="23" height="17" alt="Spain" src="../../img/flags/es.png" data-hires="true" />
                  <span>Spain</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../../country?country=CH&amp;redirect=%252Fblog%252Fpage%252F4" class="selected">
                  <img width="23" height="17" alt="Switzerland" src="../../img/flags/ch.png" data-hires="true" />
                  <span>Switzerland</span>
                    <em>Beta</em>
                </a>
              </li>
            <li class='notify-signup-link'>
              <a href='../../pt'>
                Stripe is expanding, more countries <span class='arrow'>coming soon</span>
              </a>
            </li>
          </ul>

      </div>

    <ul>
      <li><a href="../../pricing">Pricing</a></li>
      <li><a href="1"><span>Blog</span></a></li>
      <li><a href="https://status.stripe.com"><span>API Status</span></a></li>
      <li><a href="../../country?country=CH&amp;redirect=%252Fabout">About</a></li>
      <li><a href="../../jobs/index.html"><span>Jobs</span></a></li>
      <li><a href="../../country?country=CH&amp;redirect=%252Fopen-source">Open Source</a></li>
      <li><a href="../../country?country=CH&amp;redirect=%252Fcontact">Contact</a></li>
      <li><a href="../../terms">Privacy&nbsp;&amp;&nbsp;Terms</a></li>
    </ul>
  </div>
</footer>

      </div>

    </div>

    

    <script src="../../assets/config-aead70c07cdca45cec67e4141bf18edc.js"></script>
    
<script type="application/json" id="analytics_config">{&quot;mixpanel&quot;:{&quot;identifier&quot;:&quot;eb71b6171a4f7ed97de9b7a0395b7ca5&quot;},&quot;ga&quot;:{},&quot;trackpage&quot;:true}</script>

<script src="https://js.stripe.com/internal/v2/analytics.min.js"></script>
<script src="../../assets/analytics-0ea5a2b2ad899260c73440d84f5ab7bc.js"></script>

    <script type="text/javascript">
      Analytics.viewed("blog");
    </script>

  </body>
</html>
