<!DOCTYPE html>
<html lang="en" id="blog" class="tablet mobile">
  <head>
    <meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="google-site-verification" content="f0LCrdI6z4Fo8zld4sHCgo5SiUE4EYYRUa6KVeX3Mw8" />

<meta name="description" content="Follow the Stripe blog for product announcements, feature updates, new countries, and technical posts about payments." />

<link rel="shortcut icon" href="../favicon.ico">

<link rel="apple-touch-icon-precomposed" href="../img/apple-touch-icon/152x152.png?2" />
<link rel="apple-touch-icon-precomposed" sizes="120x120" href="../img/apple-touch-icon/120x120.png?2" />

  <meta property="og:image" content="https://stripe.com/img/open-graph/logo.png?2" />
  <link rel="image_src" type="image/png" href="../img/open-graph/logo.png?2"/>

<link rel="stylesheet" href="https://cloud.typography.com/711858/764882/css/fonts.css" />
<link rel="stylesheet" href="../assets/shared-site-aec6cecd411e700a28df6c9943d37801.css" />
  <link rel="stylesheet" href="../assets/blog-ada6c3a77cd627b09ac436c3a82dd49d.css">
  <link rel="stylesheet" href="../assets/blogposts-b9a9b6ffe0287dc66146bd753faba55d.css">


<!--[if lt IE 9]>
<script src="/assets/html5shiv-17761200a17ebcb716dda86cca6d2472.js"></script>
<![endif]-->

<script src="../assets/shared-site-68b6ee96f2b06c9ee69778bf0979b5fb.js"></script>
  <script src="../assets/blog-776e3ed92eef5022ed98688d349fd7af.js"></script>
  <script src="../assets/zoom-3a00e8ab5b6e3ee875d7dc1bbfe183c3.js"></script>


  <link rel="alternate" type="application/rss+xml" title="RSS" href="feed.rss" />
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />

    <title>    Exploring Python Using GDB
</title>
    <meta content="fKQqMkqtSdV10U5MP3ShMdwQOzrJcAm24gSPuH24g3H0ji_xU84MZYbBFJxhDh265K3B0tgb3Y4rHhjU_LUn6w==" name="csrf-token" />
  </head>
  <body id="" class="">
    <div id="main">

      <header id="main-header" class=''>
  <div class="inner-col">
    <h1><a href="../country?country=CH&amp;redirect=%252F" title="Stripe"></a></h1>
    <nav>
      <ul class="pages">
        <li class="home"><a href="../country?country=CH&amp;redirect=%252F">Home</a></li>
        <li class="features"><a href="../features">Features</a></li>
        <li class='pricing'><a href="../pricing">Pricing</a></li>
        <li class="more">
            <span>Products</span>
            <ul>
              <li><a href='../country?country=CH&amp;redirect=%252Fcheckout'>Checkout</a></li>
              <li><a href='../country?country=CH&amp;redirect=%252Fsubscriptions'>Subscriptions</a></li>
              <li><a href='../country?country=CH&amp;redirect=%252Frelay'>Relay</a></li>
              <li><a href='../marketplaces'>Connect</a></li>
              <li><a href='../country?country=CH&amp;redirect=%252Fbitcoin'>Bitcoin</a></li>
              <li><a class="new" href='../atlas/index.html'>Atlas</a></li>

              <li class='separator'><a href="../country?country=CH&amp;redirect=%252Fgallery">Gallery</a></li>
              <li><a href="page/1">Blog</a></li>
              <li><a href="../country?country=CH&amp;redirect=%252Fabout">About</a></li>
              <li><a href="../jobs/index.html">Jobs</a></li>
            </ul>
        </li>
      </ul>
      <ul class="external">
        <li><a href="../docs.1">Documentation</a></li>
        <li><a href="https://support.stripe.com">Help &amp; Support</a></li>

        <li class="button">
          <a data-adroll-segment='submit_two' href="https://dashboard.stripe.com/login">Sign in</a>
        </li>
      </ul>
    </nav>
  </div>
</header>


      <div id="main-content">
        
  <header id="blog-header">
  	<h1><a href="page/1">Blog</a></h1>
  	<p><a href="https://twitter.com/stripe">Follow Stripe on Twitter</a></p>
  </header>
  
    <div id='blog-post--exploring-python-using-gdb'>
<article class=''>

  <header>
    <a class="picture" href="../country?country=CH&amp;redirect=%252Fabout#evan">
      <img src="../img/about/team/evan@2x.jpeg">
    </a>
    <h1><a href="../country?country=CH&amp;redirect=%252Fblog%252Fexploring-python-using-gdb">Exploring Python Using GDB<br /></a></h1>
    <p>
      <a class="author" href="../country?country=CH&amp;redirect=%252Fabout#evan">Evan Broder</a>
      <span>on</span> June 13, 2012
    </p>
  </header>
  
  <div class="content">
    <p> People tend to have a narrow view of the problems they can solve
using <a href="http://sources.redhat.com/gdb/">GDB</a>. Many think
that GDB is just for debugging <a
href="http://en.wikipedia.org/wiki/Segmentation_fault">segfaults</a>
or that it's only useful with C or C++ programs. In reality, GDB is an
impressively general and powerful tool. When you know how to use it,
you can debug just about anything, including Python, Ruby, and other
dynamic languages. It's not just for inspection either&mdash;GDB can
also be used to modify a program's behavior while it's running. </p>

<p> When we ran our <a
href="../country?country=CH&amp;redirect=%252Fblog%252Fcapture-the-flag">Capture The Flag</a>
contest, a lot of people asked us about introductions to that kind of
low-level work. GDB can be a great way to get started. In order to
demonstrate some of GDB's flexibility, and show some of the steps
involved in practical GDB work, we've put together a brief example of
debugging Python with GDB.</p>

<p> Imagine you're building a web app in Django. The standard cycle
for building one of these apps is to edit some code, hit an error, fix
it, restart the server, and refresh in the browser. It's a little
tedious. Wouldn't it be cool if you could hit the error, fix the code
while the request is still pending, and then have the request complete
successfully?</p>

<p> As it happens, the <a
href="http://www.youtube.com/watch?v=M54qmZZKKPA">Seaside</a>
framework supports exactly this. Using one of Stripe's <a
href="https://github.com/stripe/monospace-django">example
projects</a>, let's take a look at how we could pull it off in Python
using GDB:</p>

<p>
  <script type="text/javascript">
    document.write(unescape("%3Cscript src='//cdn.sublimevideo.net/js/sprnm7bi.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <video class="sublime" poster="../img/blog/posts/exploring-python-using-gdb/demo-poster-frame.png" width="580" height="326" data-name="GDB Demo Screencast" data-uid="e42303bc" preload="none">
    <source src="https://d31m30xrqokm0z.cloudfront.net/exploring-python-using-gdb/gdb-demo.mp4" />
    <source src="https://d31m30xrqokm0z.cloudfront.net/exploring-python-using-gdb/gdb-demo.webm" />
  </video>
</p>

<p> Pretty cool, right? Though a little contrived, this example
demonstrates many helpful techniques for making effective real-world
use of GDB. I'll walk through what we did in a little more detail, and
explain some of the GDB tricks as we go.</p>

<p> For the sake of brevity, I'll show the commands I type, but elide
some of the output they generate. I'm working on Ubuntu 12.04 with GDB
7.4. The manipulation should still work on other platforms, but you
probably won't get automatic pretty-printing of Python types. You can
generate them by hand by running <code>p
PyString_AsString(PyObject_Repr(obj))</code> in GDB. </p>

<h2> Getting Set Up </h2>

<p> First, let's start the monospace-django server with
<code>--noreload</code> so that Django's autoreloading doesn't get in
the way of our GDB-based reloading. We'll also use the
<code>python2.7-dbg</code> interpreter, which will ensure that less of
the program's state is optimized away. </p>

<p>
<pre>
$ <strong>git clone http://github.com/stripe/monospace-django</strong>
$ <strong>cd monospace-django/</strong>
$ <strong>virtualenv --no-site-packages env</strong>
$ <strong>cp /usr/bin/python2.7-dbg env/bin/python</strong>
$ <strong>source env/bin/activate</strong>
(env)$ <strong>pip install -r requirements.txt</strong>
(env)$ <strong>python monospace/manage.py syncdb</strong>
(env)$ <strong>python monospace/manage.py runserver --noreload</strong>

$ <strong>sudo gdb -p $(pgrep -f monospace/manage.py)</strong>
GNU gdb (Ubuntu/Linaro 7.4-2012.04-0ubuntu2) 7.4-2012.04
Copyright (C) 2012 Free Software Foundation, Inc.
[...]
Attaching to process 946
Reading symbols from /home/evan/monospace-django/env/bin/python...done.
(gdb) <strong>symbol-file /usr/bin/python2.7-dbg</strong>
Load new symbol table from "/usr/bin/python2.7-dbg"? (y or n) y
Reading symbols from /usr/bin/python2.7-dbg...done.
</pre>
</p>

<p> As of version 7.0 of GDB, it's possible to <a
href="http://sourceware.org/gdb/current/onlinedocs/gdb/Python.html">automatically
script GDB's behavior</a>, and even register your own code to
pretty-print C types. Python comes with its own hooks which can
pretty-print Python types (such as <code>PyObject *</code>) and
understand the Python stack. These hooks are loaded automatically if
you have the <code>python2.7-dbg</code> package installed on
Ubuntu. </p>

<p>Whatever you're debugging, you should look to see if there are
relevant GDB scripts available&mdash;useful helpers have been created
for many dynamic languages.</p>

<h2> Catching the Error </h2>

<p> The Python interpreter creates a <code>PyFrameObject</code> every
time it starts executing a Python stack frame. From that frame object,
we can get the name of the function being executed. It's stored as a
Python object, so we can convert it to a C string using
<code>PyString_AsString</code>, and then stop the interpreter only if
it begins executing a function called
<code>handle_uncaught_exception</code>. </p>

<p>The obvious way to catch this would be by creating a GDB
breakpoint. A lot of frames are allocated in the process of executing
Python code, though. Rather than tediously continue through hundreds
of false positives, we can set a <i>conditional breakpoint</i> that'll
break on only the frame we care about:</p>

<p>
<pre>
(gdb) <strong>b PyEval_EvalFrameEx if strcmp(PyString_AsString(f-&gt;f_code-&gt;co_name), "handle_uncaught_exception") == 0</strong>
Breakpoint 1 at 0x519d64: file ../Python/ceval.c, line 688.
(gdb) <strong>c</strong>
Continuing.
</pre>
</p>

<p> Breakpoint conditions can be pretty complex, but it's worth noting
that conditional breakpoints that fire often (like
<code>PyEval_EvalFrameEx</code>) can slow the program down
significantly. </p>

<h2> Generating the Initial Return Value </h2>

<p> Okay, let's see if we can actually fix things during the next
request. We resubmit the form. Once again, GDB halts when the app
starts generating the internal server error response. While we
investigate more, let's disable the breakpoint in order to keep things
fast. </p>

<p> What we really want to do here is to let the app finish generating
its original return value (the error response) and then to replace
that with our own (the correct response). We find the stack frame
where <code>get_response</code> is being evaluated. Once we've jumped
to that frame with the <a
href="http://sourceware.org/gdb/current/onlinedocs/gdb/Selection.html#index-up-451"><code>up</code></a>
or <a
href="http://sourceware.org/gdb/current/onlinedocs/gdb/Frames.html#index-frame_0040r_007b_002c-command_007d-430"><code>frame</code></a>
command, we can use the <a
href="http://sourceware.org/gdb/current/onlinedocs/gdb/Continuing-and-Stepping.html#index-finish-314"><code>finish</code></a>
command to wait until the currently selected stack frame finishes
executing and returns.

<p>
<pre>
Breakpoint 1, PyEval_EvalFrameEx (f=
    Frame 0x3534110, for file [...]/django/core/handlers/base.py, line 186, in handle_uncaught_exception [...], throwflag=0) at ../Python/ceval.c:688
688 ../Python/ceval.c: No such file or directory.
(gdb) <strong>disable 1</strong>
(gdb) <strong>frame 3</strong>
#3  0x0000000000521276 in PyEval_EvalFrameEx (f=
    Frame 0x31ac000, for file [...]/django/core/handlers/base.py, line 169, in get_response [...], throwflag=0) at ../Python/ceval.c:2666
2666      in ../Python/ceval.c
(gdb) <strong>finish</strong>
Run till exit from #3  0x0000000000521276 in PyEval_EvalFrameEx (f=
    Frame 0x31ac000, for file [...]/django/core/handlers/base.py, line 169, in get_response [...], throwflag=0) at ../Python/ceval.c:2666
0x0000000000526871 in fast_function (func=&lt;function at remote 0x26e96f0&gt;, 
    pp_stack=0x7fffb296e4b0, n=2, na=2, nk=0) at ../Python/ceval.c:4107
4107                         in ../Python/ceval.c
Value returned is $1 = 
    &lt;HttpResponseServerError[...] at remote 0x3474680&gt;
</pre>
</p>

<h2> Patching the Code </h2>

<p> Now that we've gotten the interpreter into the state we want, we
can use <a href="http://docs.python.org/c-api/index.html">Python's
internals</a> to modify the running state of the application. GDB
allows you to make fairly complicated dynamic function invocations,
and we'll use lots of that here. </p>

<p> We use the C equivalent of the Python <a
href="http://docs.python.org/library/functions.html#reload"><code>reload</code></a>
function to reimport the code. We have to also reload the
<code>monospace.urls</code> module so that it picks up the new code in
<code>monospace.views</code>. </p>

<p>One handy trick, which we use to invoke git in the video and curl
here, is that you can run shell commands from within GDB.</p>

<p>
<pre>
(gdb) <strong>shell curl -s -L https://gist.github.com/raw/2897961/ | patch -p1</strong>
patching file monospace/views.py
(gdb) <strong>p PyImport_ReloadModule(PyImport_AddModule("monospace.views"))</strong>
$2 = &lt;module at remote 0x31d4b58&gt;

(gdb) <strong>p PyImport_ReloadModule(PyImport_AddModule("monospace.urls"))</strong>
$3 = &lt;module at remote 0x31d45a8&gt;
</pre>
</p>

<p> We've now patched and reloaded the code. Next, let's generate a
new response by finding <code>self</code> and <code>request</code>
from the local variables in this stack frame, and fetch and call its
<code>get_response</code> method. </p>

<p>
<pre>
(gdb) <strong>p $self = PyDict_GetItemString(f-&gt;f_locals, "self")</strong>
$4 = 
    &lt;WSGIHandler([...]) at remote 0x311c610&gt;
(gdb) <strong>set $request = PyDict_GetItemString(f-&gt;f_locals, "request")</strong>
(gdb) <strong>set $get_response = PyObject_GetAttrString($self, "get_response")</strong>
(gdb) <strong>set $args = Py_BuildValue("(O)", $request)</strong>
(gdb) <strong>p PyObject_Call($get_response, $args, 0)</strong>
$5 = 
    &lt;HttpResponse([...]) at remote 0x31b9fb0&gt;
</pre>
</p>

<p>In the above snippet, we use GDB's <code>set</code> command to
assign values to variables.</p>

<p> Alright, we now have a new response. Remember that we stopped the
program right where the original <code>get_response</code> method
returned. The C return value for the Python interpreter is the same as
the Python return value. And so, to replace that return value on x86,
we just have to store the new return value in a
register&mdash;<code>$rax</code> on 64-bit x86&mdash; and then allow
the execution to continue.

<p>GDB allows you to refer to refer to the values returned by every
command you evaluate by number. In this case, we want
<code>$5</code>:</p>

<p>
<pre>
(gdb) <strong>set $rax = $5</strong>
(gdb) <strong>c</strong>
Continuing.
</pre>
</p>

<p>And, like magic, our web request finishes successfully.</p>

<p> GDB is a powerful precision tool. Even if you spend most of your
time writing code in a much higher-level language, it can be extremely
useful to have it available when you need to investigate subtle bugs
or complex issues in running applications. </p>



  </div>

  <footer>
    <p>
      June 13, 2012
    </p>
  </footer>
  
</article>
</div>



  


        <footer id="main-footer" class="">
  <div class='inner-col'>
    <p>&copy; Stripe</p>

      <div class="country-selector">
          <a class="select">
              <span>
                  <img width="23" height="17" alt="Switzerland" src="../img/flags/ch.png" data-hires="true" />
                  <strong>Switzerland</strong>
              </span>
          </a>

          <ul>
              <li >
                <a href="../country?country=AU&amp;redirect=%252Fblog%252Fexploring-python-using-gdb" >
                  <img width="23" height="17" alt="Australia" src="../img/flags/au.png" data-hires="true" />
                  <span>Australia</span>
                </a>
              </li>
              <li >
                <a href="../country?country=CA&amp;redirect=%252Fblog%252Fexploring-python-using-gdb" >
                  <img width="23" height="17" alt="Canada" src="../img/flags/ca.png" data-hires="true" />
                  <span>Canada</span>
                </a>
              </li>
              <li >
                <a href="../country?country=DK&amp;redirect=%252Fblog%252Fexploring-python-using-gdb" >
                  <img width="23" height="17" alt="Denmark" src="../img/flags/dk.png" data-hires="true" />
                  <span>Denmark</span>
                </a>
              </li>
              <li >
                <a href="../country?country=FI&amp;redirect=%252Fblog%252Fexploring-python-using-gdb" >
                  <img width="23" height="17" alt="Finland" src="../img/flags/fi.png" data-hires="true" />
                  <span>Finland</span>
                </a>
              </li>
              <li >
                <a href="../country?country=GB&amp;redirect=%252Fblog%252Fexploring-python-using-gdb" >
                  <img width="23" height="17" alt="United Kingdom" src="../img/flags/gb.png" data-hires="true" />
                  <span>United Kingdom</span>
                </a>
              </li>
              <li >
                <a href="../country?country=IE&amp;redirect=%252Fblog%252Fexploring-python-using-gdb" >
                  <img width="23" height="17" alt="Ireland" src="../img/flags/ie.png" data-hires="true" />
                  <span>Ireland</span>
                </a>
              </li>
              <li >
                <a href="../country?country=NO&amp;redirect=%252Fblog%252Fexploring-python-using-gdb" >
                  <img width="23" height="17" alt="Norway" src="../img/flags/no.png" data-hires="true" />
                  <span>Norway</span>
                </a>
              </li>
              <li >
                <a href="../country?country=SE&amp;redirect=%252Fblog%252Fexploring-python-using-gdb" >
                  <img width="23" height="17" alt="Sweden" src="../img/flags/se.png" data-hires="true" />
                  <span>Sweden</span>
                </a>
              </li>
              <li >
                <a href="../country?country=US&amp;redirect=%252Fblog%252Fexploring-python-using-gdb" >
                  <img width="23" height="17" alt="United States" src="../img/flags/us.png" data-hires="true" />
                  <span>United States</span>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=AT&amp;redirect=%252Fblog%252Fexploring-python-using-gdb" >
                  <img width="23" height="17" alt="Austria" src="../img/flags/at.png" data-hires="true" />
                  <span>Austria</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=BE&amp;redirect=%252Fblog%252Fexploring-python-using-gdb" >
                  <img width="23" height="17" alt="Belgium" src="../img/flags/be.png" data-hires="true" />
                  <span>Belgium</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=BR&amp;redirect=%252Fblog%252Fexploring-python-using-gdb" >
                  <img width="23" height="17" alt="Brazil" src="../img/flags/br.png" data-hires="true" />
                  <span>Brazil</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=FR&amp;redirect=%252Fblog%252Fexploring-python-using-gdb" >
                  <img width="23" height="17" alt="France" src="../img/flags/fr.png" data-hires="true" />
                  <span>France</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=DE&amp;redirect=%252Fblog%252Fexploring-python-using-gdb" >
                  <img width="23" height="17" alt="Germany" src="../img/flags/de.png" data-hires="true" />
                  <span>Germany</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=IT&amp;redirect=%252Fblog%252Fexploring-python-using-gdb" >
                  <img width="23" height="17" alt="Italy" src="../img/flags/it.png" data-hires="true" />
                  <span>Italy</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=JP&amp;redirect=%252Fblog%252Fexploring-python-using-gdb" >
                  <img width="23" height="17" alt="Japan" src="../img/flags/jp.png" data-hires="true" />
                  <span>Japan</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=LU&amp;redirect=%252Fblog%252Fexploring-python-using-gdb" >
                  <img width="23" height="17" alt="Luxembourg" src="../img/flags/lu.png" data-hires="true" />
                  <span>Luxembourg</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=MX&amp;redirect=%252Fblog%252Fexploring-python-using-gdb" >
                  <img width="23" height="17" alt="Mexico" src="../img/flags/mx.png" data-hires="true" />
                  <span>Mexico</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=NL&amp;redirect=%252Fblog%252Fexploring-python-using-gdb" >
                  <img width="23" height="17" alt="Netherlands" src="../img/flags/nl.png" data-hires="true" />
                  <span>Netherlands</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=PT&amp;redirect=%252Fblog%252Fexploring-python-using-gdb" >
                  <img width="23" height="17" alt="Portugal" src="../img/flags/pt.png" data-hires="true" />
                  <span>Portugal</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=SG&amp;redirect=%252Fblog%252Fexploring-python-using-gdb" >
                  <img width="23" height="17" alt="Singapore" src="../img/flags/sg.png" data-hires="true" />
                  <span>Singapore</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=ES&amp;redirect=%252Fblog%252Fexploring-python-using-gdb" >
                  <img width="23" height="17" alt="Spain" src="../img/flags/es.png" data-hires="true" />
                  <span>Spain</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=CH&amp;redirect=%252Fblog%252Fexploring-python-using-gdb" class="selected">
                  <img width="23" height="17" alt="Switzerland" src="../img/flags/ch.png" data-hires="true" />
                  <span>Switzerland</span>
                    <em>Beta</em>
                </a>
              </li>
            <li class='notify-signup-link'>
              <a href='../pt'>
                Stripe is expanding, more countries <span class='arrow'>coming soon</span>
              </a>
            </li>
          </ul>

      </div>

    <ul>
      <li><a href="../pricing">Pricing</a></li>
      <li><a href="page/1"><span>Blog</span></a></li>
      <li><a href="https://status.stripe.com"><span>API Status</span></a></li>
      <li><a href="../country?country=CH&amp;redirect=%252Fabout">About</a></li>
      <li><a href="../jobs/index.html"><span>Jobs</span></a></li>
      <li><a href="../country?country=CH&amp;redirect=%252Fopen-source">Open Source</a></li>
      <li><a href="../country?country=CH&amp;redirect=%252Fcontact">Contact</a></li>
      <li><a href="../terms">Privacy&nbsp;&amp;&nbsp;Terms</a></li>
    </ul>
  </div>
</footer>

      </div>

    </div>

    

    <script src="../assets/config-aead70c07cdca45cec67e4141bf18edc.js"></script>
    
<script type="application/json" id="analytics_config">{&quot;mixpanel&quot;:{&quot;identifier&quot;:&quot;eb71b6171a4f7ed97de9b7a0395b7ca5&quot;},&quot;ga&quot;:{},&quot;trackpage&quot;:true}</script>

<script src="https://js.stripe.com/internal/v2/analytics.min.js"></script>
<script src="../assets/analytics-0ea5a2b2ad899260c73440d84f5ab7bc.js"></script>

    <script type="text/javascript">
      Analytics.viewed("blog");
    </script>

  </body>
</html>
