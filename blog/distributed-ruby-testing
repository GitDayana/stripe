<!DOCTYPE html>
<html lang="en" id="blog" class="tablet mobile">
  <head>
    <meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="google-site-verification" content="f0LCrdI6z4Fo8zld4sHCgo5SiUE4EYYRUa6KVeX3Mw8" />

<meta name="description" content="Follow the Stripe blog for product announcements, feature updates, new countries, and technical posts about payments." />

<link rel="shortcut icon" href="../favicon.ico">

<link rel="apple-touch-icon-precomposed" href="../img/apple-touch-icon/152x152.png?2" />
<link rel="apple-touch-icon-precomposed" sizes="120x120" href="../img/apple-touch-icon/120x120.png?2" />

  <meta property="og:image" content="https://stripe.com/img/open-graph/logo.png?2" />
  <link rel="image_src" type="image/png" href="../img/open-graph/logo.png?2"/>

<link rel="stylesheet" href="https://cloud.typography.com/711858/764882/css/fonts.css" />
<link rel="stylesheet" href="../assets/shared-site-aec6cecd411e700a28df6c9943d37801.css" />
  <link rel="stylesheet" href="../assets/blog-ada6c3a77cd627b09ac436c3a82dd49d.css">
  <link rel="stylesheet" href="../assets/blogposts-b9a9b6ffe0287dc66146bd753faba55d.css">


<!--[if lt IE 9]>
<script src="/assets/html5shiv-17761200a17ebcb716dda86cca6d2472.js"></script>
<![endif]-->

<script src="../assets/shared-site-68b6ee96f2b06c9ee69778bf0979b5fb.js"></script>
  <script src="../assets/blog-776e3ed92eef5022ed98688d349fd7af.js"></script>
  <script src="../assets/zoom-3a00e8ab5b6e3ee875d7dc1bbfe183c3.js"></script>


  <link rel="alternate" type="application/rss+xml" title="RSS" href="feed.rss" />
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />

    <title>    Running three hours of Ruby tests in under three minutes
</title>
    <meta content="MC_uhxp-MVOJ7DkIgIEVbh15qim-hwHsyCcuSxhAYxC4BetEAx1043r8Y9je-6nlJcRQwa_s1dQBPbknmU3Hig==" name="csrf-token" />
  </head>
  <body id="" class="">
    <div id="main">

      <header id="main-header" class=''>
  <div class="inner-col">
    <h1><a href="../country?country=CH&amp;redirect=%252F" title="Stripe"></a></h1>
    <nav>
      <ul class="pages">
        <li class="home"><a href="../country?country=CH&amp;redirect=%252F">Home</a></li>
        <li class="features"><a href="../features">Features</a></li>
        <li class='pricing'><a href="../pricing">Pricing</a></li>
        <li class="more">
            <span>Products</span>
            <ul>
              <li><a href='../country?country=CH&amp;redirect=%252Fcheckout'>Checkout</a></li>
              <li><a href='../country?country=CH&amp;redirect=%252Fsubscriptions'>Subscriptions</a></li>
              <li><a href='../country?country=CH&amp;redirect=%252Frelay'>Relay</a></li>
              <li><a href='../marketplaces'>Connect</a></li>
              <li><a href='../country?country=CH&amp;redirect=%252Fbitcoin'>Bitcoin</a></li>
              <li><a class="new" href='../atlas/index.html'>Atlas</a></li>

              <li class='separator'><a href="../country?country=CH&amp;redirect=%252Fgallery">Gallery</a></li>
              <li><a href="page/1">Blog</a></li>
              <li><a href="../country?country=CH&amp;redirect=%252Fabout">About</a></li>
              <li><a href="../jobs/index.html">Jobs</a></li>
            </ul>
        </li>
      </ul>
      <ul class="external">
        <li><a href="../docs.1">Documentation</a></li>
        <li><a href="https://support.stripe.com">Help &amp; Support</a></li>

        <li class="button">
          <a data-adroll-segment='submit_two' href="https://dashboard.stripe.com/login">Sign in</a>
        </li>
      </ul>
    </nav>
  </div>
</header>


      <div id="main-content">
        
  <header id="blog-header">
  	<h1><a href="page/1">Blog</a></h1>
  	<p><a href="https://twitter.com/stripe">Follow Stripe on Twitter</a></p>
  </header>
  
    <div id='blog-post--distributed-ruby-testing'>
<article class=''>

  <header>
    <a class="picture" href="../country?country=CH&amp;redirect=%252Fabout#nelhage">
      <img src="../img/about/team/nelhage@2x.jpeg">
    </a>
    <h1><a href="../country?country=CH&amp;redirect=%252Fblog%252Fdistributed-ruby-testing">Running three hours of Ruby tests in under three minutes<br /></a></h1>
    <p>
      <a class="author" href="../country?country=CH&amp;redirect=%252Fabout#nelhage">Nelson Elhage</a>
      <span>on</span> August 13, 2015
    </p>
  </header>
  
  <div class="content">
    <style>
.waterfall img {
  padding: 5px;
  border: 1px solid #eee;
}
.waterfall img:first-of-type {
  margin-right: 10px;
}
.waterfall img:last-of-type {
  padding-top: 17px;
}
</style>
<p>
  At Stripe, we make extensive use of automated testing to help ensure
  the stability and reliability of our services. We have expansive
  test coverage for our API and other core services, we run tests on a
  continuous integration server over every git branch, and we never deploy without green
  tests.
</p>

<p>
  The size and complexity of our codebase has grown over the past few years—and
  so has the size of the test suite. As of August 2015, we have over 1400 test
  files that define nearly 15,000 test cases and make over 130,000 assertions.
  According to our CI server, the tests would take over three hours if run
  sequentially.
</p>

<p>
  With a large (and growing) group of engineers waiting for those tests
  with every change they make, the speed of running tests is
  critical. We’ve used a number of hosted CI solutions in the past,
  but as test runtimes crept past 10 minutes, we brought
  testing in-house to give us more control and room for experimentation.
</p>

<p>
  Recently, we’ve implemented our own distributed test runner that
  brought the runtime of our tests to just under three minutes.  While
  some of these tactics are specific to our codebase and systems, we
  hope sharing what we did to improve our test runtimes will help
  other engineering organizations.
</p>

<hr />

<h3>Forking executor</h3>
<p>
  We write tests
  using <a href="https://github.com/seattlerb/minitest" class="github">minitest</a>,
  but we've implemented our
  own <a href="https://github.com/seattlerb/minitest#writing-extensions">plugin</a>
  to execute tests in parallel across multiple CPUs on multiple
  different servers.
</p>

<p>
  In order to get maximum parallel performance out of our build
  servers, we run tests in separate processes, allowing each process to make
  maximum use of the machine's CPU and I/O capability. (We run builds on
  Amazon's <code>c4.8xlarge</code> instances, which give us 36 cores each.)
</p>

<p>
  Initially, we experimented with using Ruby's threads instead
  of multiple processes, but discovered that using a large number of
  threads was significantly slower than using multiple processes. This
  slowdown was present even if the ruby threads were doing nothing but
  monitoring subprocess children. Our current runner doesn’t use Ruby threads at all.
</p>

<p>
  When tests start up, we start by loading all of our application code into
  a single Ruby process so we don’t have to parse and load all
  our Ruby code and gem dependencies multiple times.
  This process then calls <code>fork</code> a
  number of times to produce N different processes that’ll each have
  all of the code pre-loaded and ready to go.
</p>

<p>
  Each of those workers then starts executing tests. As they execute
  tests, our custom executor <code>fork</code>s further: Each
  process <code>fork</code>s and executes a single test file’s worth
  of tests inside the child process. The child process writes the
  results to the parent over a pipe, and then exits.
</p>

<p>
  This second round of <code>fork</code>ing provides a layer of isolation
  between tests: If a test makes changes to global state, running the test
  inside a throwaway process will clean everything up once that process
  exits. Isolating state at a per-file level also means that running
  individual tests on developer machines will behave similarly to the
  way they behave in CI, which is an important debugging affordance.
</p>

<hr />

<h2>Docker</h2>

<p>
  The custom forking executor spawns a lot of processes, and creates a
  number of scratch files on disk. We run all builds at Stripe inside
  of Docker, which means we don't need to worry about cleaning up all
  of these processes or this on-disk state. At the end of a build,
  all of the state—be that in-memory processes or on
  disk—will be cleaned up by a <code>docker stop</code>, every
  time.
</p>

<p>
  Managing trees of UNIX processes is notoriously difficult to do
  reliably, and it would be easy for a system that <code>fork</code>s
  this often to leak zombie processes or stray workers (especially
  during development of the test framework itself). Using a
  containerization solution like Docker eliminates that
  nuisance, and eliminates the need to write a bunch of fiddly cleanup
  code.
</p>

<hr />
<h2>Managing build workers</h2>

<p>
  In order to run each build across multiple machines at once, we
  need a system to keep track of which servers are currently in-use
  and which ones are free, and to assign incoming work to available
  servers.
</p>

<p>
  We run all our tests inside
  of <a href="https://jenkins-ci.org/">Jenkins</a>; Rather than
  writing custom code to manage worker pools, we (ab)use a Jenkins
  plugin called
  the <a href="https://wiki.jenkins-ci.org/display/JENKINS/Matrix+Project+Plugin">matrix
  build plugin</a>.
</p>

<p>
  The matrix build plugin is designed for projects where you want a
  "build matrix" that tests a project in multiple environments. For
  example, you might want to build every release of a library against
  several versions of Ruby and make sure it works on each of them.
</p>

<p>
  We misuse it slightly by configuring a custom build axis, called
  <code>BUILD_ROLE</code>, and telling Jenkins to build with
  <code>BUILD_ROLE=leader</code>, <code>BUILD_ROLE=worker1</code>,
  <code>BUILD_ROLE=worker2</code>, and so on. This causes Jenkins to
  run N simultaneous jobs for each build.
</p>

<p>
  Combined with
  some <a href="https://wiki.jenkins-ci.org/display/JENKINS/Heavy+Job+Plugin">other
  Jenkins configuration</a>, we can ensure that each of these builds
  runs on its own machine. Using this, we can take
  advantage of Jenkins worker management, scheduling, and resource
  allocation to accomplish our goal of maintaining a large pool of
  identical workers and allocating a small number of them for each
  build.
</p>

<hr />

<h2>NSQ</h2>

<p>
  Once we have a pool of workers running, we decide which tests to run
  on each node.
</p>

<p>
  One tactic for splitting work—used by several of our previous test
  runners—is to split tests up statically. You decide ahead of time
  which workers will run which tests, and then each worker just runs
  those tests start-to-finish. A simple version of this strategy just
  hashes each test and take the result modulo the number of workers;
  Sophisticated versions can record how long each test took, and try
  to divide tests into group of equal total runtime.
</p>

<p>
  The problem with static allocations is that they’re extremely prone
  to stragglers. If you guess wrong about how long tests will take, or
  if one server is briefly slow for whatever reason, it’s very easy
  for one job to finish far after all the others, which means slower,
  less efficient, tests.
</p>

<p>
  We opted for an alternate, dynamic approach, which allocates work in
  real-time using a work queue. We manage all coordination between
  workers using an <a href="http://nsq.io/">nsqd</a>
  instance. <code>nsq</code> is a super-simple queue that was
  developed at <a href="http://bit.ly">Bit.ly</a>; we already use it
  in a few other places, so it was natural to adopt here.
</p>

<p>
  Using the build number provided by Jenkins, we separate distinct
  test runs. Each run makes use of three queues to coordinate work:
  <ul>
    <li>
      The node with <code>BUILD_ROLE=leader</code> writes each test
      file that needs to be run into
      the <code>test.&lt;BUILD_NUMBER&gt;.jobs</code> queue.
    </li>
    <li>
      As workers execute tests, they write the results back to the
      <code>test.&lt;BUILD_NUMBER&gt;.results</code> queue, where they
      are collected by the leader node.
    </li>
    <li>
      Once the leader has results for each test, it writes "kill"
      signals to the <code>test.&lt;BUILD_NUMBER&gt;.shutdown</code>
      queue, one for each worker machine. A thread on each worker
      pulls off a single event and terminates all work on that node.
    </li>
  </ul>
</p>

<p>
  Each worker machine forks off a pool of
  processes after loading code. Each of those processes independently
  reads from the <code>jobs</code> queue and executes tests. By
  relying on nsq for coordination even within a single machine, we
  have no need for a second, machine-local, communication mechanism,
  which might risk limiting our concurrency across multiple CPUs.
</p>

<p>
  Other than the <code>leader</code> node, all nodes are homogenous;
  they blindly pull work off the queue and execute it, and otherwise
  behave identically.
</p>

<p>
  Dynamic allocation has proven to be hugely effective. All of our
  worker processes across all of our different machines reliably
  finish within a few seconds of each other, which means we're making
  excellent use of our available resources.
</p>

<p>
  Because workers only accept jobs as they go, work remains
  well-balanced even if things go slightly awry: Even if one of the
  servers starts up slightly slowly, or if there isn't enough capacity
  to start all four servers right at once, or if the servers happen to
  be on different-sized hardware, we still tend to see every worker
  finishing essentially at once.
</p>

<hr />

<h2>Visualization</h2>

<p>
  Reasoning about and understanding performance of a distributed
  system is always a challenging task. If tests aren't finishing
  quickly, it's important that we can understand why so we can debug
  and resolve the issue.
</p>

<p>
  The right visualization can often capture performance characteristics
  and problems in a very powerful (and visible) way, letting operators
  spot the problems immediately, without having to pore through reams of
  log files and timing data.
</p>

<p>
  To this end, we've built a
  <a href="https://en.wikipedia.org/wiki/Waterfall_chart">waterfall
  visualizer</a> for our test runner. The test processes record timing
  data as they run, and save the result in a central file on the build
  leader. Some Javascript <code>d3</code> code can then assemble that
  data into a waterfall diagram showing when each individual job started
  and stopped.
</p>

<div class="image-center waterfall">
  <img src="../img/blog/posts/distributed-ruby-testing/jenkins-slow-run.png" data-hires="true" width="275">
  <img src="../img/blog/posts/distributed-ruby-testing/jenkins-fast-run.png" data-hires="true" width="275">
  <p>Waterfall diagrams of a slow test run and a fast test run.</p>
</div>

<p>
  Each group of blue bars shows tests run by a single process on a
  single machine. The black lines that drop down near the right show
  the finish times for each process. In the first visualization, you
  can see that the first process (and to a lesser extent, the second)
  took much longer to finish than all the others, meaning a single
  test was holding up the entire build.
</p>

<p>
  By default, our test runner uses test files as the unit of
  parallelism, with each process running an entire file at a
  time. Because of stragglers like the above case, we implemented an
  option to split individual test files further, distributing the
  individual test classes in the file instead of the entire file.
</p>

<p>
  If we apply that option to the slow files and re-run, all the "finished"
  lines collapse into one, indicating that every process on every worker
  finished at essentially the same time—an optimal usage of resources.
</p>

<p>
  Notice also that the waterfall graphs show processes generally going
  from slower tests to faster ones. The test runner keeps a persistent
  cache recording how long each test took on previous runs, and
  enqueues tests starting with the slowest. This ensures that slow
  tests start as soon as possible and is important for ensuring an
  optimal work distribution.
</p>

<hr />

<p>
  The decision to invest effort in our own testing infrastructure
  wasn't necessarily obvious: we could have continued to use a
  third-party solution. However, spending a comparatively small amount
  of effort allowed the rest of our engineering organization to move
  significantly faster—and with more confidence. I'm also optimistic
  this test runner will continue to scale with us and support our
  growth for several years to come.
</p>

<p>
  If you end up implementing something like this (or have
  already), <a href="mailto:nelhage@stripe.com">send me a note</a>!
  I'd love to hear what you've done, and what's worked or hasn't for
  others with similar problems.
</p>

  </div>

  <footer>
    <p>
      August 13, 2015
    </p>
  </footer>
  
</article>
</div>



  


        <footer id="main-footer" class="">
  <div class='inner-col'>
    <p>&copy; Stripe</p>

      <div class="country-selector">
          <a class="select">
              <span>
                  <img width="23" height="17" alt="Switzerland" src="../img/flags/ch.png" data-hires="true" />
                  <strong>Switzerland</strong>
              </span>
          </a>

          <ul>
              <li >
                <a href="../country?country=AU&amp;redirect=%252Fblog%252Fdistributed-ruby-testing" >
                  <img width="23" height="17" alt="Australia" src="../img/flags/au.png" data-hires="true" />
                  <span>Australia</span>
                </a>
              </li>
              <li >
                <a href="../country?country=CA&amp;redirect=%252Fblog%252Fdistributed-ruby-testing" >
                  <img width="23" height="17" alt="Canada" src="../img/flags/ca.png" data-hires="true" />
                  <span>Canada</span>
                </a>
              </li>
              <li >
                <a href="../country?country=DK&amp;redirect=%252Fblog%252Fdistributed-ruby-testing" >
                  <img width="23" height="17" alt="Denmark" src="../img/flags/dk.png" data-hires="true" />
                  <span>Denmark</span>
                </a>
              </li>
              <li >
                <a href="../country?country=FI&amp;redirect=%252Fblog%252Fdistributed-ruby-testing" >
                  <img width="23" height="17" alt="Finland" src="../img/flags/fi.png" data-hires="true" />
                  <span>Finland</span>
                </a>
              </li>
              <li >
                <a href="../country?country=GB&amp;redirect=%252Fblog%252Fdistributed-ruby-testing" >
                  <img width="23" height="17" alt="United Kingdom" src="../img/flags/gb.png" data-hires="true" />
                  <span>United Kingdom</span>
                </a>
              </li>
              <li >
                <a href="../country?country=IE&amp;redirect=%252Fblog%252Fdistributed-ruby-testing" >
                  <img width="23" height="17" alt="Ireland" src="../img/flags/ie.png" data-hires="true" />
                  <span>Ireland</span>
                </a>
              </li>
              <li >
                <a href="../country?country=NO&amp;redirect=%252Fblog%252Fdistributed-ruby-testing" >
                  <img width="23" height="17" alt="Norway" src="../img/flags/no.png" data-hires="true" />
                  <span>Norway</span>
                </a>
              </li>
              <li >
                <a href="../country?country=SE&amp;redirect=%252Fblog%252Fdistributed-ruby-testing" >
                  <img width="23" height="17" alt="Sweden" src="../img/flags/se.png" data-hires="true" />
                  <span>Sweden</span>
                </a>
              </li>
              <li >
                <a href="../country?country=US&amp;redirect=%252Fblog%252Fdistributed-ruby-testing" >
                  <img width="23" height="17" alt="United States" src="../img/flags/us.png" data-hires="true" />
                  <span>United States</span>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=AT&amp;redirect=%252Fblog%252Fdistributed-ruby-testing" >
                  <img width="23" height="17" alt="Austria" src="../img/flags/at.png" data-hires="true" />
                  <span>Austria</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=BE&amp;redirect=%252Fblog%252Fdistributed-ruby-testing" >
                  <img width="23" height="17" alt="Belgium" src="../img/flags/be.png" data-hires="true" />
                  <span>Belgium</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=BR&amp;redirect=%252Fblog%252Fdistributed-ruby-testing" >
                  <img width="23" height="17" alt="Brazil" src="../img/flags/br.png" data-hires="true" />
                  <span>Brazil</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=FR&amp;redirect=%252Fblog%252Fdistributed-ruby-testing" >
                  <img width="23" height="17" alt="France" src="../img/flags/fr.png" data-hires="true" />
                  <span>France</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=DE&amp;redirect=%252Fblog%252Fdistributed-ruby-testing" >
                  <img width="23" height="17" alt="Germany" src="../img/flags/de.png" data-hires="true" />
                  <span>Germany</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=IT&amp;redirect=%252Fblog%252Fdistributed-ruby-testing" >
                  <img width="23" height="17" alt="Italy" src="../img/flags/it.png" data-hires="true" />
                  <span>Italy</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=JP&amp;redirect=%252Fblog%252Fdistributed-ruby-testing" >
                  <img width="23" height="17" alt="Japan" src="../img/flags/jp.png" data-hires="true" />
                  <span>Japan</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=LU&amp;redirect=%252Fblog%252Fdistributed-ruby-testing" >
                  <img width="23" height="17" alt="Luxembourg" src="../img/flags/lu.png" data-hires="true" />
                  <span>Luxembourg</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=MX&amp;redirect=%252Fblog%252Fdistributed-ruby-testing" >
                  <img width="23" height="17" alt="Mexico" src="../img/flags/mx.png" data-hires="true" />
                  <span>Mexico</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=NL&amp;redirect=%252Fblog%252Fdistributed-ruby-testing" >
                  <img width="23" height="17" alt="Netherlands" src="../img/flags/nl.png" data-hires="true" />
                  <span>Netherlands</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=PT&amp;redirect=%252Fblog%252Fdistributed-ruby-testing" >
                  <img width="23" height="17" alt="Portugal" src="../img/flags/pt.png" data-hires="true" />
                  <span>Portugal</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=SG&amp;redirect=%252Fblog%252Fdistributed-ruby-testing" >
                  <img width="23" height="17" alt="Singapore" src="../img/flags/sg.png" data-hires="true" />
                  <span>Singapore</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=ES&amp;redirect=%252Fblog%252Fdistributed-ruby-testing" >
                  <img width="23" height="17" alt="Spain" src="../img/flags/es.png" data-hires="true" />
                  <span>Spain</span>
                    <em>Beta</em>
                </a>
              </li>
              <li class="beta">
                <a href="../country?country=CH&amp;redirect=%252Fblog%252Fdistributed-ruby-testing" class="selected">
                  <img width="23" height="17" alt="Switzerland" src="../img/flags/ch.png" data-hires="true" />
                  <span>Switzerland</span>
                    <em>Beta</em>
                </a>
              </li>
            <li class='notify-signup-link'>
              <a href='../pt'>
                Stripe is expanding, more countries <span class='arrow'>coming soon</span>
              </a>
            </li>
          </ul>

      </div>

    <ul>
      <li><a href="../pricing">Pricing</a></li>
      <li><a href="page/1"><span>Blog</span></a></li>
      <li><a href="https://status.stripe.com"><span>API Status</span></a></li>
      <li><a href="../country?country=CH&amp;redirect=%252Fabout">About</a></li>
      <li><a href="../jobs/index.html"><span>Jobs</span></a></li>
      <li><a href="../country?country=CH&amp;redirect=%252Fopen-source">Open Source</a></li>
      <li><a href="../country?country=CH&amp;redirect=%252Fcontact">Contact</a></li>
      <li><a href="../terms">Privacy&nbsp;&amp;&nbsp;Terms</a></li>
    </ul>
  </div>
</footer>

      </div>

    </div>

    

    <script src="../assets/config-aead70c07cdca45cec67e4141bf18edc.js"></script>
    
<script type="application/json" id="analytics_config">{&quot;mixpanel&quot;:{&quot;identifier&quot;:&quot;eb71b6171a4f7ed97de9b7a0395b7ca5&quot;},&quot;ga&quot;:{},&quot;trackpage&quot;:true}</script>

<script src="https://js.stripe.com/internal/v2/analytics.min.js"></script>
<script src="../assets/analytics-0ea5a2b2ad899260c73440d84f5ab7bc.js"></script>

    <script type="text/javascript">
      Analytics.viewed("blog");
    </script>

  </body>
</html>
